{
  "hash": "1ce84086674ed66c46346605315e01aa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\"\nmessage: false\nwarning: false\neditor_options: \n  chunk_output_type: inline\n---\n\n# Libraries\n\nLoad Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(caret)\nlibrary(tidyr)\nlibrary(r4pde)\nlibrary(refund)\nlibrary(readr)\nlibrary(fdatest)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(rms)\nlibrary(pROC)\nlibrary(PresenceAbsence)\nlibrary(OptimalCutpoints)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(PRROC)\nlibrary(patchwork)\n```\n:::\n\n\n# Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read datasets\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\n# Remove studies 126 to 150\ndata <- data %>% filter(!study %in% 126:150)\ndata_nasa <- data_nasa %>% filter(!study %in% 126:150)\n\n# Read predictor\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n```\n:::\n\n\n# Logistic Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up datadist for rms\ndd <- datadist(df_predictors)\noptions(datadist = \"dd\")\n\n# Convert epidemic to numeric\nobs <- as.numeric(as.character(df_predictors$epidemic))\n\nn <- nrow(df_predictors)\n```\n:::\n\n\nFit logistic regression models using predictors of interest. Restricted cubic splines are applied where appropriate to allow for non-linear effects.\n\n### Logistic model 1 (LM1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit logistic model with restricted cubic splines\n\nm_logistic <- lrm(factor(epidemic) ~ tmin + rcs(rh, 4), \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n:::\n\n\n### Logistic model 2 (LM2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit logistic model with restricted cubic splines\nm_logistic2 <- lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n:::\n\n\n### Logistic model 3 (LM3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit logistic model with restricted cubic splines\n\nm_logistic3 <- lrm(factor(epidemic) ~ tmin + prec2, \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n:::\n\n\n## LM performance\n\nEvaluate models fit using Cox-Snell and Nagelkerke R², Brier Score, ROC-AUC, optimal classification threshold, accuracy, and confusion matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_logistic <- function(model, data, resp_col, B_boot = 1000) {\n  n <- nrow(data)\n  actual <- data[[resp_col]]\n  predicted_prob <- predict(model, type = \"fitted\")\n  \n  # Log-likelihoods\n  ll_null <- logLik(glm(as.formula(paste(resp_col, \"~ 1\")), data = data, family = binomial()))\n  ll_full <- logLik(model)\n  \n  # R²\n  cs_r2 <- 1 - exp((2 / n) * (ll_null - ll_full))\n  nag_r2 <- cs_r2 / (1 - exp((2 / n) * as.numeric(ll_null)))\n  \n  # Brier\n  brier <- mean((predicted_prob - actual)^2)\n  \n  # ROC-AUC\n  roc_obj <- pROC::roc(actual, predicted_prob)\n  auc_val <- pROC::auc(roc_obj)\n  \n  # Optimal threshold\n  preds <- data.frame(1, actual, predicted_prob)\n  opt_thresh <- optimal.thresholds(preds)$predicted_prob[3]\n  predicted_class <- ifelse(predicted_prob > opt_thresh, 1, 0)\n  accuracy <- mean(predicted_class == actual)\n  \n  # Confusion matrix\n  conf <- caret::confusionMatrix(\n    factor(predicted_class), \n    factor(actual), \n    mode = \"everything\", \n    positive = \"1\"\n  )\n  \n  # PR-AUC via bootstrap\n  pr_auc_fun <- function(y, p) {\n    y <- as.integer(y)\n    if (length(unique(y)) < 2) return(NA_real_)\n    PRROC::pr.curve(scores.class0 = p[y == 1],\n                    scores.class1 = p[y == 0],\n                    curve = FALSE)$auc.integral\n  }\n  \n  pr_apparent <- pr_auc_fun(actual, predicted_prob)\n  opt_vec <- numeric(B_boot)\n  for (b in 1:B_boot) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    y_boot <- dat_boot[[resp_col]]\n    p_boot <- predict(fit_b, type = \"fitted\")\n    p_test_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    opt_vec[b] <- pr_auc_fun(y_boot, p_boot) - pr_auc_fun(actual, p_test_orig)\n}\n  pr_corrected <- pr_apparent - mean(na.omit(opt_vec))\n  \n  list(\n    cs_r2 = cs_r2,\n    nag_r2 = nag_r2,\n    brier = brier,\n    auc_roc = auc_val,\n    accuracy = accuracy,\n    conf_matrix = conf,\n    pr_auc = pr_corrected,\n    opt_threshold = opt_thresh\n  )\n}\n```\n:::\n\n\n### LM1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_LM1 <- evaluate_logistic(m_logistic, df_predictors, \"epidemic\")\n```\n:::\n\n\n### LM2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_LM2 <- evaluate_logistic(m_logistic2, df_predictors, \"epidemic\")\n```\n:::\n\n\n### LM3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_LM3 <- evaluate_logistic(m_logistic3, df_predictors, \"epidemic\")\n```\n:::\n\n\n## Models validation\n\nPerform internal validation using bootstrap and cross-validation. PR-AUC is calculated with bootstrap optimism correction to estimate the expected performance on new data.\n\n### LM1\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted_prob <- predict(m_logistic, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.028   Mean squared error=0.00096\n0.9 Quantile of absolute error=0.043\n```\n\n\n:::\n\n```{.r .cell-code}\ncal_cv <- calibrate(m_logistic, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.052   Mean squared error=0.0036\n0.9 Quantile of absolute error=0.092\n```\n\n\n:::\n\n```{.r .cell-code}\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Dxy       C (ROC)            R2             D      D:Chi-sq \n 6.362667e-01  8.181333e-01  3.845901e-01  3.267619e-01  4.184524e+01 \n          D:p             U      U:Chi-sq           U:p             Q \n 9.879086e-11 -1.600000e-02  5.684342e-14  1.000000e+00  3.427619e-01 \n        Brier     Intercept         Slope          Emax           E90 \n 1.670537e-01 -9.221220e-16  1.000000e+00  8.967492e-02  5.126278e-02 \n         Eavg           S:z           S:p \n 2.899140e-02 -7.742772e-02  9.382833e-01 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Internal validation\nvalidation_boot <- validate(m_logistic, method = \"boot\", B = 1000)\nprint(validation_boot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected    n\nDxy           0.6363   0.6590  0.6137   0.0453          0.5910 1000\nR2            0.3846   0.4196  0.3499   0.0697          0.3149 1000\nIntercept     0.0000   0.0000 -0.0439   0.0439         -0.0439 1000\nSlope         1.0000   1.0000  0.8507   0.1493          0.8507 1000\nEmax          0.0000   0.0000  0.0434   0.0434          0.0434 1000\nD             0.3268   0.3671  0.2925   0.0745          0.2522 1000\nU            -0.0160  -0.0160  0.0231  -0.0391          0.0231 1000\nQ             0.3428   0.3831  0.2694   0.1136          0.2291 1000\nB             0.1671   0.1589  0.1752  -0.0163          0.1834 1000\ng             1.7761   2.0259  1.6374   0.3885          1.3876 1000\ngp            0.3095   0.3188  0.2918   0.0270          0.2825 1000\n```\n\n\n:::\n\n```{.r .cell-code}\nvalidation_cv <- validate(m_logistic, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected  n\nDxy           0.6363   0.6353  0.6327   0.0026          0.6336 10\nR2            0.3846   0.3863  0.4279  -0.0416          0.4261 10\nIntercept     0.0000   0.0000  3.6218  -3.6218          3.6218 10\nSlope         1.0000   1.0000 34.7253 -33.7253         34.7253 10\nEmax          0.0000   0.0000  0.4834   0.4834          0.4834 10\nD             0.3268   0.3278  0.3535  -0.0257          0.3525 10\nU            -0.0160  -0.0177  0.0612  -0.0789          0.0629 10\nQ             0.3428   0.3456  0.2924   0.0532          0.2896 10\nB             0.1671   0.1664  0.1795  -0.0131          0.1802 10\ng             1.7761   1.7886 38.9117 -37.1230         38.8992 10\ngp            0.3095   0.3095  0.3039   0.0056          0.3039 10\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npr_auc_bootstrap <- function(model, data, response, B = 1000, seed = 123) {\n  set.seed(seed)\n  \n  # Internal function to compute PR-AUC\n  pr_auc_fun <- function(y, p) {\n    y <- as.integer(y)\n    if (length(unique(y)) < 2) return(NA_real_)\n    PRROC::pr.curve(\n      scores.class0 = p[y == 1],\n      scores.class1 = p[y == 0],\n      curve = FALSE\n    )$auc.integral\n  }\n  \n  # Extract response and predicted probabilities\n  y_full <- data[[response]]\n  p_full <- predict(model, type = \"fitted\")\n  \n  # Apparent PR-AUC\n  pr_apparent <- pr_auc_fun(y_full, p_full)\n  \n  # Bootstrap to estimate optimism\n  n <- nrow(data)\n  opt_vec <- numeric(B)\n  for (b in 1:B) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    \n    y_boot <- dat_boot[[response]]\n    p_boot <- predict(fit_b, type = \"fitted\")\n    pr_apparent_b <- pr_auc_fun(y_boot, p_boot)\n    \n    p_test_on_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    pr_test_b <- pr_auc_fun(y_full, p_test_on_orig)\n    \n    opt_vec[b] <- pr_apparent_b - pr_test_b\n  }\n  \n  opt_mean <- mean(na.omit(opt_vec))\n  pr_corrected <- pr_apparent - opt_mean\n  \n  # Bootstrap percentile confidence interval\n  pr_test_vec <- numeric(B)\n  for (b in 1:B) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    p_test_on_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    pr_test_vec[b] <- pr_auc_fun(y_full, p_test_on_orig)\n  }\n  \n  ci <- quantile(na.omit(pr_test_vec), c(0.025, 0.975))\n  \n  # Return results as a list\n  list(\n    pr_apparent = pr_apparent,\n    pr_corrected = pr_corrected,\n    optimism = opt_mean,\n    ci_95 = ci\n  )\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_LM1 <- pr_auc_bootstrap(m_logistic, df_predictors, \"epidemic\")\nres_LM1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$pr_apparent\n[1] 0.7690194\n\n$pr_corrected\n[1] 0.7418514\n\n$optimism\n[1] 0.027168\n\n$ci_95\n     2.5%     97.5% \n0.7087109 0.7719495 \n```\n\n\n:::\n:::\n\n\n### LM2\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted_prob <- predict(m_logistic2, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic2, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.036   Mean squared error=0.002\n0.9 Quantile of absolute error=0.074\n```\n\n\n:::\n\n```{.r .cell-code}\ncal_cv <- calibrate(m_logistic2, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.104   Mean squared error=0.01442\n0.9 Quantile of absolute error=0.181\n```\n\n\n:::\n\n```{.r .cell-code}\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Dxy       C (ROC)            R2             D      D:Chi-sq \n 6.357333e-01  8.178667e-01  3.911504e-01  3.335673e-01  4.269592e+01 \n          D:p             U      U:Chi-sq           U:p             Q \n 6.394563e-11 -1.600000e-02  1.421085e-14  1.000000e+00  3.495673e-01 \n        Brier     Intercept         Slope          Emax           E90 \n 1.641585e-01 -4.158460e-14  1.000000e+00  7.827309e-02  6.439991e-02 \n         Eavg           S:z           S:p \n 2.963018e-02 -5.250303e-02  9.581279e-01 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Internal validation\nvalidation_boot <- validate(m_logistic2, method = \"boot\", B = 1000)\nprint(validation_boot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected    n\nDxy           0.6357   0.6618  0.6032   0.0586          0.5771 1000\nR2            0.3912   0.4328  0.3476   0.0853          0.3059 1000\nIntercept     0.0000   0.0000 -0.0627   0.0627         -0.0627 1000\nSlope         1.0000   1.0000  0.8253   0.1747          0.8253 1000\nEmax          0.0000   0.0000  0.0535   0.0535          0.0535 1000\nD             0.3336   0.3812  0.2902   0.0910          0.2425 1000\nU            -0.0160  -0.0160  0.0244  -0.0404          0.0244 1000\nQ             0.3496   0.3972  0.2658   0.1314          0.2182 1000\nB             0.1642   0.1547  0.1735  -0.0189          0.1830 1000\ng             1.6600   1.9367  1.5239   0.4128          1.2473 1000\ngp            0.3083   0.3206  0.2872   0.0334          0.2749 1000\n```\n\n\n:::\n\n```{.r .cell-code}\nvalidation_cv <- validate(m_logistic2, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected  n\nDxy           0.6357   0.6374  0.5730   0.0644          0.5713 10\nR2            0.3912   0.3961  0.3802   0.0160          0.3752 10\nIntercept     0.0000   0.0000  3.3391  -3.3391          3.3391 10\nSlope         1.0000   1.0000  9.2640  -8.2640          9.2640 10\nEmax          0.0000   0.0000  0.4664   0.4664          0.4664 10\nD             0.3336   0.3381  0.3085   0.0296          0.3039 10\nU            -0.0160  -0.0177  0.0845  -0.1023          0.0863 10\nQ             0.3496   0.3558  0.2239   0.1319          0.2177 10\nB             0.1642   0.1629  0.1873  -0.0244          0.1886 10\ng             1.6600   1.6869 13.2673 -11.5804         13.2404 10\ngp            0.3083   0.3099  0.2876   0.0223          0.2860 10\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_LM2 <- pr_auc_bootstrap(m_logistic2, df_predictors, \"epidemic\")\nres_LM2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$pr_apparent\n[1] 0.7815969\n\n$pr_corrected\n[1] 0.7537298\n\n$optimism\n[1] 0.02786702\n\n$ci_95\n     2.5%     97.5% \n0.7294202 0.7809791 \n```\n\n\n:::\n:::\n\n\n### LM3\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted_prob <- predict(m_logistic3, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic3, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.042   Mean squared error=0.00246\n0.9 Quantile of absolute error=0.077\n```\n\n\n:::\n\n```{.r .cell-code}\ncal_cv <- calibrate(m_logistic3, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.063   Mean squared error=0.00576\n0.9 Quantile of absolute error=0.097\n```\n\n\n:::\n\n```{.r .cell-code}\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Dxy       C (ROC)            R2             D      D:Chi-sq \n 6.378667e-01  8.189333e-01  3.580264e-01  2.996694e-01  3.845868e+01 \n          D:p             U      U:Chi-sq           U:p             Q \n 5.592540e-10 -1.600000e-02  2.842171e-14  1.000000e+00  3.156694e-01 \n        Brier     Intercept         Slope          Emax           E90 \n 1.687973e-01 -1.716688e-15  1.000000e+00  9.278250e-02  8.381359e-02 \n         Eavg           S:z           S:p \n 4.633975e-02 -3.152830e-01  7.525468e-01 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Internal validation\nvalidation_boot <- validate(m_logistic3, method = \"boot\", B = 1000)\nprint(validation_boot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected    n\nDxy           0.6379   0.6414  0.6271   0.0144          0.6235 1000\nR2            0.3580   0.3762  0.3500   0.0262          0.3318 1000\nIntercept     0.0000   0.0000 -0.0077   0.0077         -0.0077 1000\nSlope         1.0000   1.0000  0.9624   0.0376          0.9624 1000\nEmax          0.0000   0.0000  0.0098   0.0098          0.0098 1000\nD             0.2997   0.3217  0.2917   0.0300          0.2697 1000\nU            -0.0160  -0.0160  0.0063  -0.0223          0.0063 1000\nQ             0.3157   0.3377  0.2854   0.0523          0.2634 1000\nB             0.1688   0.1636  0.1728  -0.0092          0.1780 1000\ng             1.6805   1.8006  1.6475   0.1531          1.5274 1000\ngp            0.2970   0.2999  0.2929   0.0070          0.2899 1000\n```\n\n\n:::\n\n```{.r .cell-code}\nvalidation_cv <- validate(m_logistic3, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training   test optimism index.corrected  n\nDxy           0.6379   0.6361 0.6250   0.0111          0.6268 10\nR2            0.3580   0.3603 0.4339  -0.0735          0.4316 10\nIntercept     0.0000   0.0000 0.2946  -0.2946          0.2946 10\nSlope         1.0000   1.0000 1.9885  -0.9885          1.9885 10\nEmax          0.0000   0.0000 0.1786   0.1786          0.1786 10\nD             0.2997   0.3015 0.3482  -0.0467          0.3464 10\nU            -0.0160  -0.0177 0.0828  -0.1005          0.0845 10\nQ             0.3157   0.3192 0.2654   0.0538          0.2619 10\nB             0.1688   0.1680 0.1799  -0.0120          0.1808 10\ng             1.6805   1.6938 3.2882  -1.5944          3.2749 10\ngp            0.2970   0.2977 0.3130  -0.0154          0.3124 10\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_LM3 <- pr_auc_bootstrap(m_logistic3, df_predictors, \"epidemic\")\nres_LM3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$pr_apparent\n[1] 0.7319088\n\n$pr_corrected\n[1] 0.7198495\n\n$optimism\n[1] 0.01205921\n\n$ci_95\n     2.5%     97.5% \n0.7179385 0.7445676 \n```\n\n\n:::\n:::\n\n\n# Ensemble Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit base models and get probabilities\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n```\n:::\n\n\nCreate ensemble predictions:\n\n### Unweighted\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple mean of predicted probabilities\n\nensemble_unw   <- (p1 + p2 + p3) / 3\n```\n:::\n\n\n### Majorityard vote\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define cutpoints for each base model\ncut_p1 <- 0.530\ncut_p2 <- 0.51\ncut_p3 <- 0.460\n\n# Convert predicted probabilities to binary classification\nclass_p1 <- ifelse(p1 >= cut_p1, 1, 0)\nclass_p2 <- ifelse(p2 >= cut_p2, 1, 0)\nclass_p3 <- ifelse(p3 >= cut_p3, 1, 0)\n\n# Majority vote function\nhard_vote <- function(...) {\n  votes <- c(...)\n  if (sum(votes) >= ceiling(length(votes)/2)) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n\n# Apply hard vote across observations\nensemble_hard <- mapply(hard_vote, class_p1, class_p2, class_p3)\n```\n:::\n\n\n### Stacked ensemble\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use base model predictions as features in a meta logistic regression model\n\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\n\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\nprint(meta_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:  glm(formula = epidemic ~ p1 + p2 + p3, family = binomial, data = stack_data)\n\nCoefficients:\n(Intercept)           p1           p2           p3  \n    -2.8931       0.8888       2.7411       2.3118  \n\nDegrees of Freedom: 124 Total (i.e. Null);  121 Residual\nNull Deviance:\t    168.3 \nResidual Deviance: 121.6 \tAIC: 129.6\n```\n\n\n:::\n:::\n\n\n## Ensenble models metrics\n\nMetrics: Brier score, optimal threshold, accuracy, confusion matrix, Youden index\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevaluate_ensemble <- function(predicted_prob, actual) {\n  brier_score <- mean((predicted_prob - actual)^2)\n  \n  # Optimal threshold\n  preds <- data.frame(1, actual, predicted_prob)\n  o <- optimal.thresholds(preds)\n  threshold <- o$predicted_prob[3]\n  \n  # Binary classification and accuracy\n  predicted <- ifelse(predicted_prob > threshold, 1, 0)\n  accuracy <- mean(predicted == actual)\n  \n  # Confusion matrix\n  cmax <- confusionMatrix(\n    data = as.factor(predicted),\n    reference = as.factor(actual),\n    mode = \"everything\",\n    positive = \"1\"\n  )\n  Sensitivity <- cmax$byClass[\"Sensitivity\"]\n  Specificity <- cmax$byClass[\"Specificity\"]\n  Youden <- Sensitivity + Specificity - 1\n  \n  list(\n    Brier = brier_score,\n    Threshold = threshold,\n    Accuracy = accuracy,\n    Sensitivity = Sensitivity,\n    Specificity = Specificity,\n    Youden = Youden\n  )\n}\n```\n:::\n\n\n### Unweighted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactual <- df_predictors$epidemic\nres_unw <- evaluate_ensemble(ensemble_unw, actual)\nres_unw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Brier\n[1] 0.1605968\n\n$Threshold\n[1] 0.475\n\n$Accuracy\n[1] 0.8\n\n$Sensitivity\nSensitivity \n        0.7 \n\n$Specificity\nSpecificity \n  0.8666667 \n\n$Youden\nSensitivity \n  0.5666667 \n```\n\n\n:::\n:::\n\n\n### Majority vote\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_hard <- evaluate_ensemble(ensemble_hard, actual)\nres_hard\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Brier\n[1] 0.184\n\n$Threshold\n[1] 0.5\n\n$Accuracy\n[1] 0.816\n\n$Sensitivity\nSensitivity \n       0.72 \n\n$Specificity\nSpecificity \n       0.88 \n\n$Youden\nSensitivity \n        0.6 \n```\n\n\n:::\n:::\n\n\n### Stacked\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_stack <- evaluate_ensemble(ensemble_stack, actual)\nres_stack\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Brier\n[1] 0.1560908\n\n$Threshold\n[1] 0.47\n\n$Accuracy\n[1] 0.824\n\n$Sensitivity\nSensitivity \n       0.74 \n\n$Specificity\nSpecificity \n       0.88 \n\n$Youden\nSensitivity \n       0.62 \n```\n\n\n:::\n:::\n\n\n## Ensemble models validation\n\nBootstrap procedure to estimate variability of AUC, Brier score, and PR-AUC.\n\nFunction adapted for ensemble bootstrap metrics (Unweighted / Hard vote)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nensemble_metrics_bootstrap <- function(data, type = c(\"unweighted\", \"hard\"), \n                                       B = 1000, cutpoints = c(0.53, 0.51, 0.46), seed = 123) {\n  set.seed(seed)\n  type <- match.arg(type)\n  \n  n <- nrow(data)\n  aucs <- numeric(B)\n  briers <- numeric(B)\n  pr_aucs <- numeric(B)\n  \n  for (b in 1:B) {\n    # 1️⃣ Resample\n    idx <- sample(1:n, size = n, replace = TRUE)\n    boot_data <- data[idx, ]\n    \n    # 2️⃣ Fit base models\n    m1 <- lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = boot_data, x=TRUE, y=TRUE)\n    m2 <- lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = boot_data, x=TRUE, y=TRUE)\n    m3 <- lrm(factor(epidemic) ~ tmin + prec2, data = boot_data, x=TRUE, y=TRUE)\n    \n    # 3️⃣ Predictions\n    p1b <- predict(m1, type = \"fitted\")\n    p2b <- predict(m2, type = \"fitted\")\n    p3b <- predict(m3, type = \"fitted\")\n    \n    # 4️⃣ Ensemble\n    if (type == \"unweighted\") {\n      ens_b <- (p1b + p2b + p3b)/3\n    } else if (type == \"hard\") {\n      class_p1 <- ifelse(p1b >= cutpoints[1], 1, 0)\n      class_p2 <- ifelse(p2b >= cutpoints[2], 1, 0)\n      class_p3 <- ifelse(p3b >= cutpoints[3], 1, 0)\n      # Softified probability for metrics (proportion of votes)\n      ens_b <- (class_p1 + class_p2 + class_p3)/3\n    }\n    \n    # 5️⃣ Metrics\n    aucs[b] <- as.numeric(roc(boot_data$epidemic, ens_b)$auc)\n    briers[b] <- mean((ens_b - as.numeric(boot_data$epidemic))^2)\n    pr <- pr.curve(scores.class0 = ens_b[boot_data$epidemic==1],\n                   scores.class1 = ens_b[boot_data$epidemic==0],\n                   curve = FALSE)\n    pr_aucs[b] <- pr$auc.integral\n  }\n  \n  list(AUC = aucs, Brier = briers, PR_AUC = pr_aucs)\n}\n```\n:::\n\n\n### Unweighted\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_unweighted <- ensemble_metrics_bootstrap(df_predictors, type = \"unweighted\", B = 1000)\nmean(res_unweighted$AUC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8421867\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(res_unweighted$Brier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1534931\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(res_unweighted$PR_AUC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7956525\n```\n\n\n:::\n:::\n\n\n### Majority vote\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_hard <- ensemble_metrics_bootstrap(df_predictors, type = \"hard\", B = 1000)\nmean(res_hard$AUC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8117832\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(res_hard$Brier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1735476\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(res_hard$PR_AUC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7582948\n```\n\n\n:::\n:::\n\n\n### Stacked\n\nStacked ensemble calibration and validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd <- datadist(stack_data)\n\noptions(datadist = \"dd\")\n\nfit_stacked <- lrm(epidemic ~ p1 + p2 + p3, data = stack_data, x = TRUE, y = TRUE)\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(fit_stacked, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.032   Mean squared error=0.0015\n0.9 Quantile of absolute error=0.065\n```\n\n\n:::\n\n```{.r .cell-code}\ncal_cv <- calibrate(fit_stacked, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-29-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nn=125   Mean absolute error=0.041   Mean squared error=0.00335\n0.9 Quantile of absolute error=0.08\n```\n\n\n:::\n\n```{.r .cell-code}\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n```\n\n::: {.cell-output-display}\n![](logistic_models2_files/figure-html/unnamed-chunk-29-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Dxy       C (ROC)            R2             D      D:Chi-sq \n 6.378667e-01  8.189333e-01  3.580264e-01  2.996694e-01  3.845868e+01 \n          D:p             U      U:Chi-sq           U:p             Q \n 5.592540e-10 -1.600000e-02  2.842171e-14  1.000000e+00  3.156694e-01 \n        Brier     Intercept         Slope          Emax           E90 \n 1.687973e-01 -1.716688e-15  1.000000e+00  9.278250e-02  8.381359e-02 \n         Eavg           S:z           S:p \n 4.633975e-02 -3.152830e-01  7.525468e-01 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Internal validation\nvalidation_boot <- validate(fit_stacked, method = \"boot\", B = 1000)\nprint(validation_boot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected    n\nDxy           0.6688   0.6730  0.6505   0.0225          0.6463 1000\nR2            0.4212   0.4393  0.4060   0.0332          0.3880 1000\nIntercept     0.0000   0.0000 -0.0126   0.0126         -0.0126 1000\nSlope         1.0000   1.0000  0.9422   0.0578          0.9422 1000\nEmax          0.0000   0.0000  0.0153   0.0153          0.0153 1000\nD             0.3654   0.3880  0.3493   0.0387          0.3267 1000\nU            -0.0160  -0.0160  0.0047  -0.0207          0.0047 1000\nQ             0.3814   0.4040  0.3447   0.0593          0.3220 1000\nB             0.1561   0.1509  0.1621  -0.0112          0.1673 1000\ng             1.7290   1.8189  1.6663   0.1526          1.5764 1000\ngp            0.3236   0.3259  0.3167   0.0092          0.3144 1000\n```\n\n\n:::\n\n```{.r .cell-code}\nvalidation_cv <- validate(fit_stacked, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          index.orig training    test optimism index.corrected  n\nDxy           0.6688   0.6712  0.6119   0.0593          0.6095 10\nR2            0.4212   0.4246  0.4497  -0.0252          0.4464 10\nIntercept     0.0000   0.0000  4.9438  -4.9438          4.9438 10\nSlope         1.0000   1.0000  6.7315  -5.7315          6.7315 10\nEmax          0.0000   0.0000  0.5253   0.5253          0.5253 10\nD             0.3654   0.3686  0.3884  -0.0197          0.3851 10\nU            -0.0160  -0.0177  0.1104  -0.1281          0.1121 10\nQ             0.3814   0.3864  0.2780   0.1084          0.2730 10\nB             0.1561   0.1552  0.1720  -0.0168          0.1729 10\ng             1.7290   1.7457 13.4171 -11.6714         13.4004 10\ngp            0.3236   0.3247  0.3145   0.0102          0.3134 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract corrected AUC from Dxy\nDxy <- validation_boot[\"Dxy\", \"index.corrected\"]\nB <- validation_boot[\"B\", \"index.corrected\"]\nauc <- (Dxy + 1) / 2\nB\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1673119\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}