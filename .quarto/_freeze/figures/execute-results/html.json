{
  "hash": "cdd6b7f2ac6094a5ca41514300427b09",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Figures\"\nmessage: false\nwarning: false\n---\n\nHere is the code for all figures of the paper.\n\n# Libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggbreak)\nlibrary(gsheet)\nlibrary(readxl)\nlibrary(ggtext)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(patchwork)\nlibrary(car)\nlibrary(rms)\nlibrary(scales)\nlibrary(caret)\n# tidyfun is currently not on CRAN. You can install the development version from GitHub with:\n# # install.packages(\"pak\")\n#pak::pak(\"tidyfun/tidyfun\")\nlibrary(tidyfun)\n# Kaique dos S. Alves modifications to the geom-spaghetti function (updated ggplot linewidth instead of size):\nsource(here::here(\"geom-spaghetti.R\"))\n```\n:::\n\n\nGeom-spaghetti.R source: https://doi.org/10.17605/OSF.IO/V53PY\n\n# Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\ndata <- data %>%\n  filter(!study %in% 126:150)\n\ndata_nasa <- data_nasa %>%\n  filter(!study %in% 126:150)\n```\n:::\n\n\n# Figure 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitp.curves <- function(data, variable, sig_days = NULL, .ylab = NULL) {\n  var_sym <- rlang::enquo(variable)\n  \n  p <- suppressMessages(\n    data %>%\n      dplyr::select(study, days, epidemic, !!var_sym) %>%\n      tf_nest(!!var_sym, .id = study, .arg = days) %>%\n      dplyr::group_by(epidemic) %>%\n      dplyr::summarize(var_mean = mean(!!var_sym)) %>%\n      dplyr::mutate(smooth_mean = tfb(var_mean)) %>%\n      ggplot(aes(tf = smooth_mean, color = factor(epidemic))) +\n      geom_spaghetti(linewidth = 2, alpha = 1) +\n      scale_x_continuous(breaks = seq(-28, 28, by = 4)) +\n      geom_vline(xintercept = 0, color = \"gray\", linetype = \"dashed\") +\n      ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n      theme_bw() +\n      labs(x = \"Days relative to event\",\n           y = .ylab,\n           color = \"Epidemic status\") +\n      theme(axis.title.y = element_text(size = 12),\n            axis.title.x = element_text(size = 12),\n            axis.text.x = element_text(size = 9),\n            axis.text.y = element_text(size = 9),\n            legend.position = \"bottom\")\n  )\n  \n# Add shading for significant days\n  if (!is.null(sig_days)) {\n    for (d in sig_days) {\n      p <- p + annotate(\"rect\", xmin = d - 0.5, xmax = d + 0.5, ymin = -Inf, ymax = Inf,\n                        fill = \"gray40\", alpha = 0.3)\n    }\n  }\n  \n  return(p)\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitp_rh <- c(5, 6, 7, 8, 9, 10)\n\nrh_curves <- itp.curves(data, RH2M, sig_days  = itp_rh, .ylab = \"Relative humidity (%)\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitp_tmin <- 2:10\n\ntmin_curves <- itp.curves(data, T2M_MIN, sig_days = itp_tmin, .ylab = \"Min Temperature (°C)\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitp_tdew <- 4:10\n\ntdew_curves <- itp.curves(data_nasa, T2MDEW, sig_days = itp_tdew, .ylab = \"Dew point (°C)\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nitp_prec <- 6:10\n\nprec_curves <- itp.curves(data_nasa, PRECTOTCORR, sig_days = itp_prec, .ylab = \"Precipitation (mm)\")\n```\n:::\n\n\n### boxplots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_tmin1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), tmin, color = factor(epidemic))) +\n  geom_boxplot(fill = NA, linewidth = 0.9) + \n  labs(y = \"Tmin<sub>2_10</sub> (°C)\", x = \"Epidemic\") +\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 12), \n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",          \n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n    )\n \np_dew1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), dew, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9) +\n  labs(y = \"Tdew<sub>4_10</sub> (°C)\", x = \"Epidemic\")+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )\n\np_rh1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), rh, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9)+\n  labs(x = \"Epidemic\", y = \"RH<sub>5_10</sub> (%)\")+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 12), \n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n      )\n\np_prec1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), prec2, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9)+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  labs(x = \"Epidemic\", y = \"PREC<sub>6_10</sub> (mm)\")+\n    theme(\n    axis.title.y = element_text(size = 12),  \n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n    )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(tmin_curves | p_tmin1) /\n(rh_curves | p_rh1) /\n(tdew_curves | p_dew1) /\n(prec_curves | p_prec1) +\n  plot_layout(guides = \"collect\") &  \n  theme(legend.position = \"bottom\") & \n    plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# Figure 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n\n# Real\nactual <- df_predictors$epidemic\n\n# # Ensembles\nensemble_unw   <- (p1 + p2 + p3) / 3\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hard vote\n# Cut-points para classificação binária\ncut_p1 <- 0.530\ncut_p2 <- 0.51\ncut_p3 <- 0.460\n\n# Classificações binárias\nclass_p1 <- ifelse(p1 >= cut_p1, 1, 0)\nclass_p2 <- ifelse(p2 >= cut_p2, 1, 0)\nclass_p3 <- ifelse(p3 >= cut_p3, 1, 0)\n\n# Função votação majoritária\nhard_vote <- function(...) {\n  votes <- c(...)\n  if (sum(votes) >= ceiling(length(votes)/2)) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n\n# Aplica a votação majoritária para cada observação\nensemble_hard <- mapply(hard_vote, class_p1, class_p2, class_p3)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#-----------------------------------------------------\n# Function to compute evaluation metrics for a model\n#-----------------------------------------------------\nevaluate_model <- function(probs, threshold = 0.5, name = \"model\", type = \"base\") {\n  pred <- ifelse(probs >= threshold, 1, 0)\n  cm <- confusionMatrix(factor(pred), reference = as.factor(actual), positive = \"1\")\n  data.frame(\n    Model = name,\n    Type = type,\n    Accuracy = cm$overall[\"Accuracy\"],\n    Sensitivity = cm$byClass[\"Sensitivity\"],\n    Specificity = cm$byClass[\"Specificity\"]\n  )\n}\n\n#-------------------------------------------------\n# Evaluate all models and bind into a single table\n#-------------------------------------------------\neval_df <- rbind(\n  evaluate_model(p1, 0.53, \"LM1\", \"Base\"),\n  evaluate_model(p2, 0.51, \"LM2\", \"Base\"),\n  evaluate_model(p3, 0.46, \"LM3\", \"Base\"),\n  evaluate_model(ensemble_unw, 0.475, \"UNW\", \"Ensemble\"),\n  evaluate_model(ensemble_hard, 0.5, \"HRD\", \"Ensemble\"),\n  evaluate_model(ensemble_stack, 0.47, \"STACK\", \"Ensemble\")\n)\n\n# Add Youden index to eval_df and sort\neval_df$Youden <- with(eval_df, Sensitivity + Specificity - 1)\n\n# Factor Model by sorted order for consistent legend\neval_df$Model <- factor(eval_df$Model, levels = eval_df$Model)\n\neval_df <- eval_df %>%\n  mutate(\n  ROC_AUC = case_when(\n    Model == \"LM1\"  ~ 0.798,\n    Model == \"LM2\"  ~ 0.792,\n    Model == \"LM3\"  ~ 0.814,\n    Model == \"UNW\"  ~ 0.842,\n    Model == \"HRD\"  ~ 0.811,\n    Model == \"STACK\"~ 0.826\n  ),\n  PR_AUC = case_when(\n    Model == \"LM1\"  ~ 0.742,\n    Model == \"LM2\"  ~ 0.754,\n    Model == \"LM3\"  ~ 0.720,\n    Model == \"UNW\"  ~ 0.796,\n    Model == \"HRD\"  ~ 0.758,\n    Model == \"STACK\"~ 0.784\n  ))\n\n# View table\nprint(eval_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Model     Type Accuracy Sensitivity Specificity    Youden ROC_AUC\nAccuracy    LM1     Base    0.776        0.64   0.8666667 0.5066667   0.798\nAccuracy1   LM2     Base    0.792        0.64   0.8933333 0.5333333   0.792\nAccuracy2   LM3     Base    0.800        0.74   0.8400000 0.5800000   0.814\nAccuracy3   UNW Ensemble    0.800        0.70   0.8666667 0.5666667   0.842\nAccuracy4   HRD Ensemble    0.816        0.72   0.8800000 0.6000000   0.811\nAccuracy5 STACK Ensemble    0.824        0.74   0.8800000 0.6200000   0.826\n          PR_AUC\nAccuracy   0.742\nAccuracy1  0.754\nAccuracy2  0.720\nAccuracy3  0.796\nAccuracy4  0.758\nAccuracy5  0.784\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- ggplot(eval_df, aes(x = Accuracy, y = Youden, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  scale_shape_manual(values = c(Base = 16, Ensemble = 17)) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"Accuracy\", y = \"Youden index\", size = \"AUC\") +\n  theme_bw() +\n  xlim(0.75, 0.85) +\n  ylim(0.5, 0.7) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") +\n        guides(color = guide_legend(nrow = 1),  shape = \"none\") +\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         \n  breaks = c(0.80, 0.81, 0.82, 0.83), \n  labels = scales::number_format(accuracy = 0.01) \n)\n\nb <- ggplot(eval_df, aes(x = Sensitivity , y = Specificity, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"Sensitivity\", y = \"Specificity\", size = \"AUC\") +\n  theme_bw() +\n  xlim(0.6, 0.8) +\n  ylim(0.825, 0.90) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + \n        guides(color = guide_legend(nrow = 1), shape = \"none\") +\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),        \n  breaks = c(0.80, 0.81, 0.82, 0.83), \n  labels = scales::number_format(accuracy = 0.01) \n)\n\nc <- ggplot(eval_df, aes(x = ROC_AUC, y = PR_AUC, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  scale_shape_manual(values = c(Base = 16, Ensemble = 17)) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"ROC_AUC\", y = \"PR_AUC\") +\n  theme_bw() +\n  xlim(0.775, 0.85) +\n  ylim(0.715, 0.80) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + \n        guides(color = guide_legend(nrow = 1),  shape = \"none\") +\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         \n  breaks = c(0.80, 0.81, 0.82, 0.83), \n  labels = scales::number_format(accuracy = 0.01) \n)\n\n(a/b/c) +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(tag_levels = \"A\")& \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n# Figure 3:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- read.csv(\"plan/res.csv\")\n\npA <- ggplot(res, aes(pt, NMB_mean)) +\n  geom_ribbon(aes(ymin = NMB_lo, ymax = NMB_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_hline(yintercept = 0, linetype = 2, color = \"gray60\") +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n    y = expression(\"Mean NMB (USD/ha per decision unit)\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )+\n    scale_y_continuous(breaks = breaks_width(10.0))\n\n\n\npB <- ggplot(res, aes(pt, Pr_trat_pos)) +\n  annotate(\"rect\", ymin = 0.5, ymax = 0.8, xmin = -Inf, xmax = Inf,\n                        fill = \"#4970b5\", alpha = 0.2)+\n  geom_line(size = 1.5, , color = \"#ED7D31\") +\n  geom_hline(yintercept = 0.5, linetype = 2, color = \"gray60\") +\n  geom_hline(yintercept = 0.8, linetype = 2, color = \"gray60\") +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0,1)) +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"Probability of NMB > 0\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\npD1 <- ggplot(res, aes(pt, NMB_trat_mean)) +\n    geom_ribbon(aes(ymin = NMB_trat_lo, ymax = NMB_trat_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_hline(yintercept = 0, linetype = 2, color = \"gray60\") +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"NMB per treated unit (USD/ha)\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\npD2 <- ggplot(res, aes(pt, PPV)) +\n  geom_ribbon(aes(ymin = PPV_req_lo, ymax = PPV_req_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_line(aes(y = PPV_req_med), linetype = 2, color = \"gray60\") +\n  scale_y_continuous(limits = c(0,1), labels = scales::percent) +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"Observed PPV vs. required PPV (C/B)\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\n(pD1 | pB)/\n(pA | pD2)+\n      plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pega os dois pontos ao redor de 0.5\nbelow <- res %>% filter(Pr_trat_pos < 0.8) %>% slice_tail(n = 1)\nabove <- res %>% filter(Pr_trat_pos >= 0.8) %>% slice_head(n = 1)\n\n# Interpolação linear\npt_50 <- below$pt + (0.5 - below$Pr_trat_pos) / (above$Pr_trat_pos - below$Pr_trat_pos) * (above$pt - below$pt)\npt_50\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3925414\n```\n\n\n:::\n:::\n\n\n\n# Figure Supplementar 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1MBiKsosQ8Hob6LkS65_1pPU25hx1CO9i42Sm_xf28ww/edit?gid=0#gid=0\") |> \n  dplyr::select(study, year, location, state, lat, lon, planting_date, cultivar, index, daa_mean, flowering) |> \n  filter(study %in% 1:101)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable |> \n  ggplot(aes(daa_mean, location))+\n  geom_boxplot(color = \"#ed7d31\",linewidth = 0.9)+\n    labs(y = \"Trial location\", x = \"Days to flowering\")+\n    theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_x_continuous(n.breaks = 6)\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# Figure Supplementar 3:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1MBiKsosQ8Hob6LkS65_1pPU25hx1CO9i42Sm_xf28ww/edit?gid=0#gid=0\") |> \n  dplyr::select(study, year, location, state, lat, lon, planting_date, cultivar, index, daa_mean, flowering) |> \n  mutate(epidemic = if_else(index >= 10, 1, 0)) |> \n  filter(study %in% 1:125,\n         epidemic == 1)\n\ntable |> \n  ggplot(aes(x = index)) +\n  geom_histogram(bins = 15, linewidth = 0.8, alpha = 0.8, position = \"identity\", color = \"#ed7d31\", fill = \"#ed7d31\")+ \n  labs(x = \"FHB severity\",\n       y = \"Count\")+\n  theme_bw() +\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(labels = number_format(accuracy = 1)) +\n  scale_x_continuous(labels = number_format(accuracy = 0.1),\n                     breaks = seq(10, 100, 15))\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# Figure Supplementar 4:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up datadist for rms\ndd <- datadist(df_predictors)\noptions(datadist = \"dd\")\n\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predictive plot\npred_obj <- Predict(models$model1, fun = plogis, conf.int = 0.95)\n\n# Convert to data.frame\npred_df <- as.data.frame(pred_obj)\n\npred_df_tmin <- pred_df |> \n  filter(.predictor. == \"tmin\")\n\npred_df_rh <- pred_df |> \n  filter(.predictor. == \"rh\")\n\ntmin_spline <- ggplot(pred_df_tmin, aes(x = tmin, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"Tmin<sub>2_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\n\nrh_spline <- ggplot(pred_df_rh, aes(x = rh, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"RH<sub>5_10</sub> (%)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\ntmin_spline | rh_spline\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predictive plot\npred_obj2 <- Predict(models$model2, fun = plogis, conf.int = 0.95)\n\n# Convert to data.frame\npred_df2 <- as.data.frame(pred_obj2)\n\npred_df_dew <- pred_df2 |> \n  filter(.predictor. == \"dew\")\n\npred_df2_rh <- pred_df2 |> \n  filter(.predictor. == \"rh\")\n\n\ntdew_spline <- ggplot(pred_df_dew, aes(x = dew, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"Tdew<sub>4_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\n\nrh2_spline <- ggplot(pred_df2_rh, aes(x = rh, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"RH<sub>5_10</sub> (%)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\ntdew_spline | rh2_spline\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predictive plot\npred_obj3 <- Predict(models$model3, fun = plogis, conf.int = 0.95)\n\n# Convert to data.frame\npred_df3 <- as.data.frame(pred_obj3)\n\npred_df_rain <- pred_df3 |> \n  filter(.predictor. == \"prec2\")\n\npred_df3_tmin <- pred_df3 |> \n  filter(.predictor. == \"tmin\")\n\nprec_spline <- ggplot(pred_df_rain, aes(x = prec2, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", size = 1.5) +\n  labs(x = \"PREC<sub>6_10</sub> (mm)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))+\n  scale_x_continuous(breaks = pretty_breaks(n = 5))\n\n\ntmin3_spline <- ggplot(pred_df3_tmin, aes(x = tmin, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", size = 1.5) +\n  labs(x = \"Tmin<sub>2_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_text(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))+\n  scale_x_continuous(breaks = pretty_breaks(n = 5))\n\nprec_spline | tmin3_spline\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(tmin_spline | rh_spline) /\n(rh2_spline | tdew_spline) /\n(tmin3_spline | prec_spline) +\n  plot_annotation(tag_levels = \"A\")\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n# Figure Supplementar 5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_preds <- read_xlsx(\"plan/df_preds.xlsx\")\n\n# Put it in long format\ndf_long <- df_preds %>%\n  pivot_longer(\n    cols = -epidemic,\n    names_to = \"model\",\n    values_to = \"prob\"\n  )\n\ndf_long <- df_long %>%\n  mutate(epidemic_f = factor(epidemic, levels = c(0, 1),\n                             labels = c(\"Non-epidemic\", \"Epidemic\")))\n\n# Histogram of predicted probabilities\nggplot(df_long, aes(x = prob, fill = factor(epidemic), color = factor(epidemic))) +\n  geom_histogram(bins = 20, linewidth = 0.8, alpha = 0.8, position = \"identity\") +\nfacet_grid(model ~ epidemic_f, scales = \"free_y\")+\n  labs(x = \"Model-fitted probability\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"0\" = \"#4970b5\", \"1\" = \"#ed7d31\"),\n                    labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  scale_color_manual(values = c(\"0\" = \"#4970b5\", \"1\" = \"#ed7d31\")) +\n  theme_bw() +\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )\n```\n\n::: {.cell-output-display}\n![](figures_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}