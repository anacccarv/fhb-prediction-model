{"title":"Functional data analysis","markdown":{"yaml":{"title":"Functional data analysis","message":false,"warning":false,"format":"html"},"headingText":"Libraries","containsRefs":false,"markdown":"\n\n\nLoad Required Libraries\n\n```{r}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(caret)\nlibrary(tidyr)\nlibrary(r4pde)\nlibrary(refund)\nlibrary(readr)\nlibrary(fdatest)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(rms)\nlibrary(pROC)\nlibrary(PresenceAbsence)\nlibrary(OptimalCutpoints)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(PRROC)\nlibrary(patchwork)\n```\n\n# Data\n\n```{r}\n# Read datasets\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\n# Remove studies 126 to 150\ndata <- data %>% filter(!study %in% 126:150)\ndata_nasa <- data_nasa %>% filter(!study %in% 126:150)\n```\n\n# Functional Data Analysis (FDA)\n\n## Interval Test Procedure\n\n```{r}\n# Perform FDA interval test for a given variable\nfda_itp_test <- function(data, variable, epidemic_col = \"epidemic\", day_col = \"days\", study_col = \"study\", B = 100, xrange = c(-28, 28)) {\n  \n  \n  # Separate epidemic and non-epidemic data\n  df_epi <- data %>%\n    filter(.data[[epidemic_col]] == 1) %>%\n    dplyr::select(all_of(c(variable, day_col, study_col)))\n  \n  df_nonepi <- data %>%\n    filter(.data[[epidemic_col]] == 0) %>%\n    dplyr::select(all_of(c(variable, day_col, study_col)))\n  \n  # Pivot to wide format\n  df_epi_wide <- df_epi %>%\n    group_by(across(all_of(study_col))) %>%\n    pivot_wider(names_from = all_of(day_col), values_from = all_of(variable)) %>%\n    ungroup() %>%\n    dplyr::select(-all_of(study_col))\n  \n  df_nonepi_wide <- df_nonepi %>%\n    group_by(across(all_of(study_col))) %>%\n    pivot_wider(names_from = all_of(day_col), values_from = all_of(variable)) %>%\n    ungroup() %>%\n    dplyr::select(-all_of(study_col))\n  \n  # Convert to matrices\n  mat_epi <- as.matrix(df_epi_wide)\n  mat_nonepi <- as.matrix(df_nonepi_wide)\n  \n  # Perform ITP test\n  itp_result <- ITP2bspline(data1 = mat_epi, data2 = mat_nonepi, B = B)\n  \n  # Plot result\n  plot(itp_result, main = variable, xrange = xrange, xlab = 'Day', xaxt = 'n')\n  axis(1, at = seq(xrange[1], xrange[2], by = 2), labels = seq(xrange[1], xrange[2], by = 2))\n  \n  return(itp_result)\n}\n```\n\n```{r}\n# Wrapper function to run FDA ITP test with summaries and stable region detection\nrun_ITP_test <- function(data, weather_var = \"RH2M\", B = 100) {\n  \n\n  weather_var_sym <- sym(weather_var)\n  \n  # Process epidemic and non-epidemic data\n  df_epidemic <- data %>%\n    mutate(days = round(days)) %>%\n    filter(epidemic == 1, days > -90) %>%\n    dplyr::select(!!weather_var_sym, days, study) %>%\n    group_by(study, days) %>%\n    summarise(value = mean(!!weather_var_sym, na.rm = TRUE), .groups = \"drop\")\n  \n  df_non_epidemic <- data %>%\n    mutate(days = round(days)) %>%\n    filter(epidemic != 1, days > -90) %>%\n    dplyr::select(!!weather_var_sym, days, study) %>%\n    group_by(study, days) %>%\n    summarise(value = mean(!!weather_var_sym, na.rm = TRUE), .groups = \"drop\")\n  \n  # Pivot to wide format\n  df_epidemic_wide <- df_epidemic %>%\n    pivot_wider(names_from = days, values_from = value) %>%\n    ungroup() %>%\n    dplyr::select(-study)\n  \n  df_non_epidemic_wide <- df_non_epidemic %>%\n    pivot_wider(names_from = days, values_from = value) %>%\n    ungroup() %>%\n    dplyr::select(-study)\n  \n \n  # Convert to matrix\n  data_epidemic <- as.matrix(df_epidemic_wide)\n  data_non_epidemic <- as.matrix(df_non_epidemic_wide)\n  \n  # Perform FDA test\n  itp_result <- ITP2bspline(data1 = data_epidemic, data2 = data_non_epidemic, B = B)\n  \n  # Print global p-value\n  cat(\"Global p-value for\", weather_var, \":\", itp_result$corrected.pval, \"\\n\")\n  \n  # Identify significant components\n  significant_components <- which(itp_result$corrected.pval < 0.05)\n  \n  if (length(significant_components) > 0) {\n    cat(\"Significant components (basis coefficients) for\", weather_var, \":\\n\")\n    print(significant_components)\n  } else {\n    cat(\"No significant components found for\", weather_var, \"\\n\")\n  }\n  \n  # Plot FDA results\n  plot(itp_result, main = weather_var, xrange = c(-28, 28), xlab = 'Day', xaxt = 'n')\n  axis(1, at = seq(-28, 28, by = 2), labels = seq(-28, 28, by = 2))\n  pvals <- itp_result$pval\n\n  # Detect stable regions\n  alpha <- 0.05\n  significant_points <- which(pvals < alpha)\n  if (length(significant_points) > 0) {\n    stable_regions <- split(significant_points, cumsum(c(1, diff(significant_points) != 1)))\n    region_ranges <- lapply(stable_regions, function(x) range(x))\n\n    cat(\"Stable regions (p-value <\", alpha, \"):\\n\")\n    for (r in region_ranges) {\n      cat(\"Day\", r[1] - 28, \"to\", r[2] - 28, \"\\n\")\n    }\n  } else {\n    cat(\"No stable regions with p-value <\", alpha, \" found.\\n\")\n  }\n  \n  return(itp_result)\n}\n```\n\n### T2M_MIN\n\n```{r}\nresult_tmin <- fda_itp_test(data = data, variable = \"T2M_MIN\")\nresult_tmin$corrected.pval\nwhich(result_tmin$corrected.pval < 0.05)\n\nitp_tmin <- run_ITP_test(data = data, weather_var = \"T2M_MIN\", B = 100)\nitp_tmin\n```\n\n### RH2M\n\n```{r}\nresult_rh <- fda_itp_test(data = data, variable = \"RH2M\")\nresult_rh$corrected.pval\nwhich(result_rh$corrected.pval < 0.05)\n\nitp_rh <- run_ITP_test(data = data, weather_var = \"RH2M\", B = 100)\nitp_rh\n```\n\n### PRECTOTCORR\n\n```{r}\nresult_prec <- fda_itp_test(data = data, variable = \"PRECTOTCORR\")\nresult_prec$corrected.pval\nwhich(result_prec$corrected.pval < 0.05)\n\nitp_prec <- run_ITP_test(data = data, weather_var = \"PRECTOTCORR\", B = 100)\nitp_prec\n```\n\n### VPD\n\n```{r}\nresult_prec <- fda_itp_test(data = data, variable = \"VPD\")\nresult_prec$corrected.pval\nwhich(result_prec$corrected.pval < 0.05)\n```\n\n### GWETTOP\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"GWETTOP\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### ALLSKY_SFC_SW_DWN\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"ALLSKY_SFC_SW_DWN\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### TDD\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"TDD\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### WS2M\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"WS2M\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### T2M_RANGE\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data, variable = \"T2M_RANGE\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### T2MDEW\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"T2MDEW\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n## Create predictors\n\n```{r}\n# Function to summarize weather variables over a range of days\nprocess_weather_var <- function(data, var_name, days_range, new_col_name, summary_func = c(\"mean\", \"sum\")) {\n  summary_func <- match.arg(summary_func)\n  day_cols <- as.character(days_range)\n  \n  # Choose the function dynamically\n  summarise_fn <- switch(summary_func,\n                         mean = rowMeans,\n                         sum = function(x, na.rm = TRUE) rowSums(x, na.rm = na.rm))\n  \n  data %>%\n    mutate(!!sym(var_name) := as.numeric(!!sym(var_name))) %>%\n    filter(!is.na(!!sym(var_name))) %>%\n    \n    group_by(study, days) %>%\n    summarise(!!sym(var_name) := mean(!!sym(var_name), na.rm = TRUE), .groups = \"drop\") %>%\n    \n    pivot_wider(names_from = days, values_from = !!sym(var_name)) %>%\n    \n    mutate(!!sym(new_col_name) := summarise_fn(\n      dplyr::select(., any_of(day_cols)), na.rm = TRUE\n    )) %>%\n    \n    dplyr::select(study, !!sym(new_col_name)) |> \n    mutate(study = as.factor(study))\n}\n\n\nprocess_weather_var <- function(data, var_name, days_range, new_col_name,\n                                summary_func = c(\"mean\", \"sum\", \"count_above\"),\n                                threshold = NULL) {\n  summary_func <- match.arg(summary_func)\n  day_cols <- as.character(days_range)\n\n  # Dynamic function based on summary_func\n  summarise_fn <- switch(summary_func,\n    mean = function(x) rowMeans(x, na.rm = TRUE),\n    sum = function(x) rowSums(x, na.rm = TRUE),\n    count_above = {\n      if (is.null(threshold)) stop(\"You must specify a threshold for count_above\")\n      function(x) rowSums(x > threshold, na.rm = TRUE)\n    }\n  )\n\n  data %>%\n    mutate(!!sym(var_name) := as.numeric(!!sym(var_name))) %>%\n    filter(!is.na(!!sym(var_name))) %>%\n    \n    group_by(study, days) %>%\n    summarise(!!sym(var_name) := mean(!!sym(var_name), na.rm = TRUE), .groups = \"drop\") %>%\n    \n    pivot_wider(names_from = days, values_from = !!sym(var_name)) %>%\n    \n    mutate(!!sym(new_col_name) := summarise_fn(\n      dplyr::select(., any_of(day_cols))\n    )) %>%\n    \n    dplyr::select(study, !!sym(new_col_name)) %>%\n    mutate(study = as.factor(study))\n}\n\n\n# Process each variable with explicit package references\nT2M_MIN_pred <- process_weather_var(data, \"T2M_MIN\", 2:10, \"tmin\")\nT2MDEW_pred <- process_weather_var(data_nasa, \"T2MDEW\", 4:10, \"dew\")\nRH2M_pred <- process_weather_var(data, \"RH2M\", 5:10, \"rh\")\nPRECTOTCORR_pred <- process_weather_var(data_nasa, \"PRECTOTCORR\", 0:10, \"prec\", summary_func = \"count_above\", threshold = 5)\nPRECTOTCORR_pred2 <- process_weather_var(data_nasa, \"PRECTOTCORR\", 6:10, \"prec2\", summary_func = \"sum\")\nRH2M_pred2 <- process_weather_var(data_nasa, \"RH2M\", 5:10, \"rh2\", summary_func = \"count_above\", threshold = 85)\n\n\n# Combine with epidemic status\nepidemic <- data %>%\n  dplyr::distinct(study, epidemic) %>%\n  mutate(study = factor(study))\n\n# Combine all data\ndf_predictors <- epidemic %>%\n  dplyr::left_join(T2M_MIN_pred, by = \"study\") |> \n  dplyr::left_join(RH2M_pred, by = \"study\") |>  \n  dplyr::left_join(RH2M_pred2, by = \"study\") |>  \n  dplyr::left_join(PRECTOTCORR_pred, by = \"study\") |> \n  dplyr::left_join(PRECTOTCORR_pred2, by = \"study\") |> \n  dplyr::left_join(T2MDEW_pred, by = \"study\")\n\n# Save predictors\nwrite_xlsx(df_predictors, \"plan/df_predictors.xlsx\")\n\n```\n","srcMarkdownNoYaml":"\n\n# Libraries\n\nLoad Required Libraries\n\n```{r}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(caret)\nlibrary(tidyr)\nlibrary(r4pde)\nlibrary(refund)\nlibrary(readr)\nlibrary(fdatest)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(rms)\nlibrary(pROC)\nlibrary(PresenceAbsence)\nlibrary(OptimalCutpoints)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(PRROC)\nlibrary(patchwork)\n```\n\n# Data\n\n```{r}\n# Read datasets\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\n# Remove studies 126 to 150\ndata <- data %>% filter(!study %in% 126:150)\ndata_nasa <- data_nasa %>% filter(!study %in% 126:150)\n```\n\n# Functional Data Analysis (FDA)\n\n## Interval Test Procedure\n\n```{r}\n# Perform FDA interval test for a given variable\nfda_itp_test <- function(data, variable, epidemic_col = \"epidemic\", day_col = \"days\", study_col = \"study\", B = 100, xrange = c(-28, 28)) {\n  \n  \n  # Separate epidemic and non-epidemic data\n  df_epi <- data %>%\n    filter(.data[[epidemic_col]] == 1) %>%\n    dplyr::select(all_of(c(variable, day_col, study_col)))\n  \n  df_nonepi <- data %>%\n    filter(.data[[epidemic_col]] == 0) %>%\n    dplyr::select(all_of(c(variable, day_col, study_col)))\n  \n  # Pivot to wide format\n  df_epi_wide <- df_epi %>%\n    group_by(across(all_of(study_col))) %>%\n    pivot_wider(names_from = all_of(day_col), values_from = all_of(variable)) %>%\n    ungroup() %>%\n    dplyr::select(-all_of(study_col))\n  \n  df_nonepi_wide <- df_nonepi %>%\n    group_by(across(all_of(study_col))) %>%\n    pivot_wider(names_from = all_of(day_col), values_from = all_of(variable)) %>%\n    ungroup() %>%\n    dplyr::select(-all_of(study_col))\n  \n  # Convert to matrices\n  mat_epi <- as.matrix(df_epi_wide)\n  mat_nonepi <- as.matrix(df_nonepi_wide)\n  \n  # Perform ITP test\n  itp_result <- ITP2bspline(data1 = mat_epi, data2 = mat_nonepi, B = B)\n  \n  # Plot result\n  plot(itp_result, main = variable, xrange = xrange, xlab = 'Day', xaxt = 'n')\n  axis(1, at = seq(xrange[1], xrange[2], by = 2), labels = seq(xrange[1], xrange[2], by = 2))\n  \n  return(itp_result)\n}\n```\n\n```{r}\n# Wrapper function to run FDA ITP test with summaries and stable region detection\nrun_ITP_test <- function(data, weather_var = \"RH2M\", B = 100) {\n  \n\n  weather_var_sym <- sym(weather_var)\n  \n  # Process epidemic and non-epidemic data\n  df_epidemic <- data %>%\n    mutate(days = round(days)) %>%\n    filter(epidemic == 1, days > -90) %>%\n    dplyr::select(!!weather_var_sym, days, study) %>%\n    group_by(study, days) %>%\n    summarise(value = mean(!!weather_var_sym, na.rm = TRUE), .groups = \"drop\")\n  \n  df_non_epidemic <- data %>%\n    mutate(days = round(days)) %>%\n    filter(epidemic != 1, days > -90) %>%\n    dplyr::select(!!weather_var_sym, days, study) %>%\n    group_by(study, days) %>%\n    summarise(value = mean(!!weather_var_sym, na.rm = TRUE), .groups = \"drop\")\n  \n  # Pivot to wide format\n  df_epidemic_wide <- df_epidemic %>%\n    pivot_wider(names_from = days, values_from = value) %>%\n    ungroup() %>%\n    dplyr::select(-study)\n  \n  df_non_epidemic_wide <- df_non_epidemic %>%\n    pivot_wider(names_from = days, values_from = value) %>%\n    ungroup() %>%\n    dplyr::select(-study)\n  \n \n  # Convert to matrix\n  data_epidemic <- as.matrix(df_epidemic_wide)\n  data_non_epidemic <- as.matrix(df_non_epidemic_wide)\n  \n  # Perform FDA test\n  itp_result <- ITP2bspline(data1 = data_epidemic, data2 = data_non_epidemic, B = B)\n  \n  # Print global p-value\n  cat(\"Global p-value for\", weather_var, \":\", itp_result$corrected.pval, \"\\n\")\n  \n  # Identify significant components\n  significant_components <- which(itp_result$corrected.pval < 0.05)\n  \n  if (length(significant_components) > 0) {\n    cat(\"Significant components (basis coefficients) for\", weather_var, \":\\n\")\n    print(significant_components)\n  } else {\n    cat(\"No significant components found for\", weather_var, \"\\n\")\n  }\n  \n  # Plot FDA results\n  plot(itp_result, main = weather_var, xrange = c(-28, 28), xlab = 'Day', xaxt = 'n')\n  axis(1, at = seq(-28, 28, by = 2), labels = seq(-28, 28, by = 2))\n  pvals <- itp_result$pval\n\n  # Detect stable regions\n  alpha <- 0.05\n  significant_points <- which(pvals < alpha)\n  if (length(significant_points) > 0) {\n    stable_regions <- split(significant_points, cumsum(c(1, diff(significant_points) != 1)))\n    region_ranges <- lapply(stable_regions, function(x) range(x))\n\n    cat(\"Stable regions (p-value <\", alpha, \"):\\n\")\n    for (r in region_ranges) {\n      cat(\"Day\", r[1] - 28, \"to\", r[2] - 28, \"\\n\")\n    }\n  } else {\n    cat(\"No stable regions with p-value <\", alpha, \" found.\\n\")\n  }\n  \n  return(itp_result)\n}\n```\n\n### T2M_MIN\n\n```{r}\nresult_tmin <- fda_itp_test(data = data, variable = \"T2M_MIN\")\nresult_tmin$corrected.pval\nwhich(result_tmin$corrected.pval < 0.05)\n\nitp_tmin <- run_ITP_test(data = data, weather_var = \"T2M_MIN\", B = 100)\nitp_tmin\n```\n\n### RH2M\n\n```{r}\nresult_rh <- fda_itp_test(data = data, variable = \"RH2M\")\nresult_rh$corrected.pval\nwhich(result_rh$corrected.pval < 0.05)\n\nitp_rh <- run_ITP_test(data = data, weather_var = \"RH2M\", B = 100)\nitp_rh\n```\n\n### PRECTOTCORR\n\n```{r}\nresult_prec <- fda_itp_test(data = data, variable = \"PRECTOTCORR\")\nresult_prec$corrected.pval\nwhich(result_prec$corrected.pval < 0.05)\n\nitp_prec <- run_ITP_test(data = data, weather_var = \"PRECTOTCORR\", B = 100)\nitp_prec\n```\n\n### VPD\n\n```{r}\nresult_prec <- fda_itp_test(data = data, variable = \"VPD\")\nresult_prec$corrected.pval\nwhich(result_prec$corrected.pval < 0.05)\n```\n\n### GWETTOP\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"GWETTOP\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### ALLSKY_SFC_SW_DWN\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"ALLSKY_SFC_SW_DWN\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### TDD\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"TDD\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### WS2M\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"WS2M\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### T2M_RANGE\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data, variable = \"T2M_RANGE\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n### T2MDEW\n\n```{r}\nresult_gwettop <- fda_itp_test(data = data_nasa, variable = \"T2MDEW\")\nresult_gwettop$corrected.pval\nwhich(result_gwettop$corrected.pval < 0.05)\n```\n\n## Create predictors\n\n```{r}\n# Function to summarize weather variables over a range of days\nprocess_weather_var <- function(data, var_name, days_range, new_col_name, summary_func = c(\"mean\", \"sum\")) {\n  summary_func <- match.arg(summary_func)\n  day_cols <- as.character(days_range)\n  \n  # Choose the function dynamically\n  summarise_fn <- switch(summary_func,\n                         mean = rowMeans,\n                         sum = function(x, na.rm = TRUE) rowSums(x, na.rm = na.rm))\n  \n  data %>%\n    mutate(!!sym(var_name) := as.numeric(!!sym(var_name))) %>%\n    filter(!is.na(!!sym(var_name))) %>%\n    \n    group_by(study, days) %>%\n    summarise(!!sym(var_name) := mean(!!sym(var_name), na.rm = TRUE), .groups = \"drop\") %>%\n    \n    pivot_wider(names_from = days, values_from = !!sym(var_name)) %>%\n    \n    mutate(!!sym(new_col_name) := summarise_fn(\n      dplyr::select(., any_of(day_cols)), na.rm = TRUE\n    )) %>%\n    \n    dplyr::select(study, !!sym(new_col_name)) |> \n    mutate(study = as.factor(study))\n}\n\n\nprocess_weather_var <- function(data, var_name, days_range, new_col_name,\n                                summary_func = c(\"mean\", \"sum\", \"count_above\"),\n                                threshold = NULL) {\n  summary_func <- match.arg(summary_func)\n  day_cols <- as.character(days_range)\n\n  # Dynamic function based on summary_func\n  summarise_fn <- switch(summary_func,\n    mean = function(x) rowMeans(x, na.rm = TRUE),\n    sum = function(x) rowSums(x, na.rm = TRUE),\n    count_above = {\n      if (is.null(threshold)) stop(\"You must specify a threshold for count_above\")\n      function(x) rowSums(x > threshold, na.rm = TRUE)\n    }\n  )\n\n  data %>%\n    mutate(!!sym(var_name) := as.numeric(!!sym(var_name))) %>%\n    filter(!is.na(!!sym(var_name))) %>%\n    \n    group_by(study, days) %>%\n    summarise(!!sym(var_name) := mean(!!sym(var_name), na.rm = TRUE), .groups = \"drop\") %>%\n    \n    pivot_wider(names_from = days, values_from = !!sym(var_name)) %>%\n    \n    mutate(!!sym(new_col_name) := summarise_fn(\n      dplyr::select(., any_of(day_cols))\n    )) %>%\n    \n    dplyr::select(study, !!sym(new_col_name)) %>%\n    mutate(study = as.factor(study))\n}\n\n\n# Process each variable with explicit package references\nT2M_MIN_pred <- process_weather_var(data, \"T2M_MIN\", 2:10, \"tmin\")\nT2MDEW_pred <- process_weather_var(data_nasa, \"T2MDEW\", 4:10, \"dew\")\nRH2M_pred <- process_weather_var(data, \"RH2M\", 5:10, \"rh\")\nPRECTOTCORR_pred <- process_weather_var(data_nasa, \"PRECTOTCORR\", 0:10, \"prec\", summary_func = \"count_above\", threshold = 5)\nPRECTOTCORR_pred2 <- process_weather_var(data_nasa, \"PRECTOTCORR\", 6:10, \"prec2\", summary_func = \"sum\")\nRH2M_pred2 <- process_weather_var(data_nasa, \"RH2M\", 5:10, \"rh2\", summary_func = \"count_above\", threshold = 85)\n\n\n# Combine with epidemic status\nepidemic <- data %>%\n  dplyr::distinct(study, epidemic) %>%\n  mutate(study = factor(study))\n\n# Combine all data\ndf_predictors <- epidemic %>%\n  dplyr::left_join(T2M_MIN_pred, by = \"study\") |> \n  dplyr::left_join(RH2M_pred, by = \"study\") |>  \n  dplyr::left_join(RH2M_pred2, by = \"study\") |>  \n  dplyr::left_join(PRECTOTCORR_pred, by = \"study\") |> \n  dplyr::left_join(PRECTOTCORR_pred2, by = \"study\") |> \n  dplyr::left_join(T2MDEW_pred, by = \"study\")\n\n# Save predictors\nwrite_xlsx(df_predictors, \"plan/df_predictors.xlsx\")\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Functional data analysis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":"visual","theme":{"light":"flatly","dark":"superhero"},"title":"Functional data analysis","message":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}