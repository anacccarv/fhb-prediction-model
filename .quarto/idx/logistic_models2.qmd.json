{"title":"Libraries","markdown":{"yaml":{"title":"","message":false,"warning":false,"editor_options":{"chunk_output_type":"inline"}},"headingText":"Libraries","containsRefs":false,"markdown":"\n\n\nLoad Required Libraries\n\n```{r}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(caret)\nlibrary(tidyr)\nlibrary(r4pde)\nlibrary(refund)\nlibrary(readr)\nlibrary(fdatest)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(rms)\nlibrary(pROC)\nlibrary(PresenceAbsence)\nlibrary(OptimalCutpoints)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(PRROC)\nlibrary(patchwork)\n```\n\n# Data\n\n```{r}\n# Read datasets\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\n# Remove studies 126 to 150\ndata <- data %>% filter(!study %in% 126:150)\ndata_nasa <- data_nasa %>% filter(!study %in% 126:150)\n\n# Read predictor\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n\n```\n\n# Logistic Models\n\n```{r}\n# Set up datadist for rms\ndd <- datadist(df_predictors)\noptions(datadist = \"dd\")\n\n# Convert epidemic to numeric\nobs <- as.numeric(as.character(df_predictors$epidemic))\n\nn <- nrow(df_predictors)\n\n```\n\nFit logistic regression models using predictors of interest. Restricted cubic splines are applied where appropriate to allow for non-linear effects.\n\n### Logistic model 1 (LM1)\n\n```{r}\n# Fit logistic model with restricted cubic splines\n\nm_logistic <- lrm(factor(epidemic) ~ tmin + rcs(rh, 4), \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n\n### Logistic model 2 (LM2)\n\n```{r}\n# Fit logistic model with restricted cubic splines\nm_logistic2 <- lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n\n### Logistic model 3 (LM3)\n\n```{r}\n# Fit logistic model with restricted cubic splines\n\nm_logistic3 <- lrm(factor(epidemic) ~ tmin + prec2, \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n\n## LM performance\n\nEvaluate models fit using Cox-Snell and Nagelkerke R², Brier Score, ROC-AUC, optimal classification threshold, accuracy, and confusion matrix.\n\n```{r}\nevaluate_logistic <- function(model, data, resp_col, B_boot = 1000) {\n  n <- nrow(data)\n  actual <- data[[resp_col]]\n  predicted_prob <- predict(model, type = \"fitted\")\n  \n  # Log-likelihoods\n  ll_null <- logLik(glm(as.formula(paste(resp_col, \"~ 1\")), data = data, family = binomial()))\n  ll_full <- logLik(model)\n  \n  # R²\n  cs_r2 <- 1 - exp((2 / n) * (ll_null - ll_full))\n  nag_r2 <- cs_r2 / (1 - exp((2 / n) * as.numeric(ll_null)))\n  \n  # Brier\n  brier <- mean((predicted_prob - actual)^2)\n  \n  # ROC-AUC\n  roc_obj <- pROC::roc(actual, predicted_prob)\n  auc_val <- pROC::auc(roc_obj)\n  \n  # Optimal threshold\n  preds <- data.frame(1, actual, predicted_prob)\n  opt_thresh <- optimal.thresholds(preds)$predicted_prob[3]\n  predicted_class <- ifelse(predicted_prob > opt_thresh, 1, 0)\n  accuracy <- mean(predicted_class == actual)\n  \n  # Confusion matrix\n  conf <- caret::confusionMatrix(\n    factor(predicted_class), \n    factor(actual), \n    mode = \"everything\", \n    positive = \"1\"\n  )\n  \n  # PR-AUC via bootstrap\n  pr_auc_fun <- function(y, p) {\n    y <- as.integer(y)\n    if (length(unique(y)) < 2) return(NA_real_)\n    PRROC::pr.curve(scores.class0 = p[y == 1],\n                    scores.class1 = p[y == 0],\n                    curve = FALSE)$auc.integral\n  }\n  \n  pr_apparent <- pr_auc_fun(actual, predicted_prob)\n  opt_vec <- numeric(B_boot)\n  for (b in 1:B_boot) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    y_boot <- dat_boot[[resp_col]]\n    p_boot <- predict(fit_b, type = \"fitted\")\n    p_test_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    opt_vec[b] <- pr_auc_fun(y_boot, p_boot) - pr_auc_fun(actual, p_test_orig)\n}\n  pr_corrected <- pr_apparent - mean(na.omit(opt_vec))\n  \n  list(\n    cs_r2 = cs_r2,\n    nag_r2 = nag_r2,\n    brier = brier,\n    auc_roc = auc_val,\n    accuracy = accuracy,\n    conf_matrix = conf,\n    pr_auc = pr_corrected,\n    opt_threshold = opt_thresh\n  )\n}\n```\n\n### LM1\n\n```{r}\nres_LM1 <- evaluate_logistic(m_logistic, df_predictors, \"epidemic\")\n```\n\n### LM2\n\n```{r}\nres_LM2 <- evaluate_logistic(m_logistic2, df_predictors, \"epidemic\")\n```\n\n### LM3\n\n```{r}\nres_LM3 <- evaluate_logistic(m_logistic3, df_predictors, \"epidemic\")\n```\n\n## Models validation\n\nPerform internal validation using bootstrap and cross-validation. PR-AUC is calculated with bootstrap optimism correction to estimate the expected performance on new data.\n\n### LM1\n\n```{r}\npredicted_prob <- predict(m_logistic, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(m_logistic, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(m_logistic, method = \"boot\", B = 1000)\nprint(validation_boot)\n\nvalidation_cv <- validate(m_logistic, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n\n```\n\n```{r}\npr_auc_bootstrap <- function(model, data, response, B = 1000, seed = 123) {\n  set.seed(seed)\n  \n  # Internal function to compute PR-AUC\n  pr_auc_fun <- function(y, p) {\n    y <- as.integer(y)\n    if (length(unique(y)) < 2) return(NA_real_)\n    PRROC::pr.curve(\n      scores.class0 = p[y == 1],\n      scores.class1 = p[y == 0],\n      curve = FALSE\n    )$auc.integral\n  }\n  \n  # Extract response and predicted probabilities\n  y_full <- data[[response]]\n  p_full <- predict(model, type = \"fitted\")\n  \n  # Apparent PR-AUC\n  pr_apparent <- pr_auc_fun(y_full, p_full)\n  \n  # Bootstrap to estimate optimism\n  n <- nrow(data)\n  opt_vec <- numeric(B)\n  for (b in 1:B) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    \n    y_boot <- dat_boot[[response]]\n    p_boot <- predict(fit_b, type = \"fitted\")\n    pr_apparent_b <- pr_auc_fun(y_boot, p_boot)\n    \n    p_test_on_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    pr_test_b <- pr_auc_fun(y_full, p_test_on_orig)\n    \n    opt_vec[b] <- pr_apparent_b - pr_test_b\n  }\n  \n  opt_mean <- mean(na.omit(opt_vec))\n  pr_corrected <- pr_apparent - opt_mean\n  \n  # Bootstrap percentile confidence interval\n  pr_test_vec <- numeric(B)\n  for (b in 1:B) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    p_test_on_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    pr_test_vec[b] <- pr_auc_fun(y_full, p_test_on_orig)\n  }\n  \n  ci <- quantile(na.omit(pr_test_vec), c(0.025, 0.975))\n  \n  # Return results as a list\n  list(\n    pr_apparent = pr_apparent,\n    pr_corrected = pr_corrected,\n    optimism = opt_mean,\n    ci_95 = ci\n  )\n}\n\n```\n\n```{r}\nres_LM1 <- pr_auc_bootstrap(m_logistic, df_predictors, \"epidemic\")\nres_LM1\n```\n\n### LM2\n\n```{r}\npredicted_prob <- predict(m_logistic2, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic2, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(m_logistic2, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(m_logistic2, method = \"boot\", B = 1000)\nprint(validation_boot)\n\n\nvalidation_cv <- validate(m_logistic2, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n\n```\n\n```{r}\nres_LM2 <- pr_auc_bootstrap(m_logistic2, df_predictors, \"epidemic\")\nres_LM2\n```\n\n### LM3\n\n```{r}\npredicted_prob <- predict(m_logistic3, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic3, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(m_logistic3, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(m_logistic3, method = \"boot\", B = 1000)\nprint(validation_boot)\n\nvalidation_cv <- validate(m_logistic3, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n```\n\n```{r}\nres_LM3 <- pr_auc_bootstrap(m_logistic3, df_predictors, \"epidemic\")\nres_LM3\n```\n\n# Ensemble Models\n\n```{r}\n# Fit base models and get probabilities\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n```\n\nCreate ensemble predictions:\n\n### Unweighted\n\n```{r}\n# Simple mean of predicted probabilities\n\nensemble_unw   <- (p1 + p2 + p3) / 3\n```\n\n### Majorityard vote\n\n```{r}\n# Define cutpoints for each base model\ncut_p1 <- 0.530\ncut_p2 <- 0.51\ncut_p3 <- 0.460\n\n# Convert predicted probabilities to binary classification\nclass_p1 <- ifelse(p1 >= cut_p1, 1, 0)\nclass_p2 <- ifelse(p2 >= cut_p2, 1, 0)\nclass_p3 <- ifelse(p3 >= cut_p3, 1, 0)\n\n# Majority vote function\nhard_vote <- function(...) {\n  votes <- c(...)\n  if (sum(votes) >= ceiling(length(votes)/2)) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n\n# Apply hard vote across observations\nensemble_hard <- mapply(hard_vote, class_p1, class_p2, class_p3)\n```\n\n### Stacked ensemble\n\n```{r}\n# Use base model predictions as features in a meta logistic regression model\n\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\n\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\nprint(meta_model)\n```\n\n## Ensenble models metrics\n\nMetrics: Brier score, optimal threshold, accuracy, confusion matrix, Youden index\n\n```{r}\nevaluate_ensemble <- function(predicted_prob, actual) {\n  brier_score <- mean((predicted_prob - actual)^2)\n  \n  # Optimal threshold\n  preds <- data.frame(1, actual, predicted_prob)\n  o <- optimal.thresholds(preds)\n  threshold <- o$predicted_prob[3]\n  \n  # Binary classification and accuracy\n  predicted <- ifelse(predicted_prob > threshold, 1, 0)\n  accuracy <- mean(predicted == actual)\n  \n  # Confusion matrix\n  cmax <- confusionMatrix(\n    data = as.factor(predicted),\n    reference = as.factor(actual),\n    mode = \"everything\",\n    positive = \"1\"\n  )\n  Sensitivity <- cmax$byClass[\"Sensitivity\"]\n  Specificity <- cmax$byClass[\"Specificity\"]\n  Youden <- Sensitivity + Specificity - 1\n  \n  list(\n    Brier = brier_score,\n    Threshold = threshold,\n    Accuracy = accuracy,\n    Sensitivity = Sensitivity,\n    Specificity = Specificity,\n    Youden = Youden\n  )\n}\n```\n\n### Unweighted\n\n```{r}\nactual <- df_predictors$epidemic\nres_unw <- evaluate_ensemble(ensemble_unw, actual)\nres_unw\n```\n\n### Majority vote\n\n```{r}\nres_hard <- evaluate_ensemble(ensemble_hard, actual)\nres_hard\n```\n\n### Stacked\n\n```{r}\nres_stack <- evaluate_ensemble(ensemble_stack, actual)\nres_stack\n```\n\n## Ensemble models validation\n\nBootstrap procedure to estimate variability of AUC, Brier score, and PR-AUC.\n\nFunction adapted for ensemble bootstrap metrics (Unweighted / Hard vote)\n\n```{r}\nensemble_metrics_bootstrap <- function(data, type = c(\"unweighted\", \"hard\"), \n                                       B = 1000, cutpoints = c(0.53, 0.51, 0.46), seed = 123) {\n  set.seed(seed)\n  type <- match.arg(type)\n  \n  n <- nrow(data)\n  aucs <- numeric(B)\n  briers <- numeric(B)\n  pr_aucs <- numeric(B)\n  \n  for (b in 1:B) {\n    # 1️⃣ Resample\n    idx <- sample(1:n, size = n, replace = TRUE)\n    boot_data <- data[idx, ]\n    \n    # 2️⃣ Fit base models\n    m1 <- lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = boot_data, x=TRUE, y=TRUE)\n    m2 <- lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = boot_data, x=TRUE, y=TRUE)\n    m3 <- lrm(factor(epidemic) ~ tmin + prec2, data = boot_data, x=TRUE, y=TRUE)\n    \n    # 3️⃣ Predictions\n    p1b <- predict(m1, type = \"fitted\")\n    p2b <- predict(m2, type = \"fitted\")\n    p3b <- predict(m3, type = \"fitted\")\n    \n    # 4️⃣ Ensemble\n    if (type == \"unweighted\") {\n      ens_b <- (p1b + p2b + p3b)/3\n    } else if (type == \"hard\") {\n      class_p1 <- ifelse(p1b >= cutpoints[1], 1, 0)\n      class_p2 <- ifelse(p2b >= cutpoints[2], 1, 0)\n      class_p3 <- ifelse(p3b >= cutpoints[3], 1, 0)\n      # Softified probability for metrics (proportion of votes)\n      ens_b <- (class_p1 + class_p2 + class_p3)/3\n    }\n    \n    # 5️⃣ Metrics\n    aucs[b] <- as.numeric(roc(boot_data$epidemic, ens_b)$auc)\n    briers[b] <- mean((ens_b - as.numeric(boot_data$epidemic))^2)\n    pr <- pr.curve(scores.class0 = ens_b[boot_data$epidemic==1],\n                   scores.class1 = ens_b[boot_data$epidemic==0],\n                   curve = FALSE)\n    pr_aucs[b] <- pr$auc.integral\n  }\n  \n  list(AUC = aucs, Brier = briers, PR_AUC = pr_aucs)\n}\n```\n\n### Unweighted\n\n```{r}\nres_unweighted <- ensemble_metrics_bootstrap(df_predictors, type = \"unweighted\", B = 1000)\nmean(res_unweighted$AUC)\nmean(res_unweighted$Brier)\nmean(res_unweighted$PR_AUC)\n```\n\n### Majority vote\n\n```{r}\nres_hard <- ensemble_metrics_bootstrap(df_predictors, type = \"hard\", B = 1000)\nmean(res_hard$AUC)\nmean(res_hard$Brier)\nmean(res_hard$PR_AUC)\n```\n\n### Stacked\n\nStacked ensemble calibration and validation\n\n```{r}\ndd <- datadist(stack_data)\n\noptions(datadist = \"dd\")\n\nfit_stacked <- lrm(epidemic ~ p1 + p2 + p3, data = stack_data, x = TRUE, y = TRUE)\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(fit_stacked, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(fit_stacked, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(fit_stacked, method = \"boot\", B = 1000)\nprint(validation_boot)\n\nvalidation_cv <- validate(fit_stacked, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n\n# Extract corrected AUC from Dxy\nDxy <- validation_boot[\"Dxy\", \"index.corrected\"]\nB <- validation_boot[\"B\", \"index.corrected\"]\nauc <- (Dxy + 1) / 2\nB\n```\n","srcMarkdownNoYaml":"\n\n# Libraries\n\nLoad Required Libraries\n\n```{r}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(caret)\nlibrary(tidyr)\nlibrary(r4pde)\nlibrary(refund)\nlibrary(readr)\nlibrary(fdatest)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(rms)\nlibrary(pROC)\nlibrary(PresenceAbsence)\nlibrary(OptimalCutpoints)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(PRROC)\nlibrary(patchwork)\n```\n\n# Data\n\n```{r}\n# Read datasets\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\n# Remove studies 126 to 150\ndata <- data %>% filter(!study %in% 126:150)\ndata_nasa <- data_nasa %>% filter(!study %in% 126:150)\n\n# Read predictor\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n\n```\n\n# Logistic Models\n\n```{r}\n# Set up datadist for rms\ndd <- datadist(df_predictors)\noptions(datadist = \"dd\")\n\n# Convert epidemic to numeric\nobs <- as.numeric(as.character(df_predictors$epidemic))\n\nn <- nrow(df_predictors)\n\n```\n\nFit logistic regression models using predictors of interest. Restricted cubic splines are applied where appropriate to allow for non-linear effects.\n\n### Logistic model 1 (LM1)\n\n```{r}\n# Fit logistic model with restricted cubic splines\n\nm_logistic <- lrm(factor(epidemic) ~ tmin + rcs(rh, 4), \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n\n### Logistic model 2 (LM2)\n\n```{r}\n# Fit logistic model with restricted cubic splines\nm_logistic2 <- lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n\n### Logistic model 3 (LM3)\n\n```{r}\n# Fit logistic model with restricted cubic splines\n\nm_logistic3 <- lrm(factor(epidemic) ~ tmin + prec2, \n                  data = df_predictors, x = TRUE, y = TRUE)\n```\n\n## LM performance\n\nEvaluate models fit using Cox-Snell and Nagelkerke R², Brier Score, ROC-AUC, optimal classification threshold, accuracy, and confusion matrix.\n\n```{r}\nevaluate_logistic <- function(model, data, resp_col, B_boot = 1000) {\n  n <- nrow(data)\n  actual <- data[[resp_col]]\n  predicted_prob <- predict(model, type = \"fitted\")\n  \n  # Log-likelihoods\n  ll_null <- logLik(glm(as.formula(paste(resp_col, \"~ 1\")), data = data, family = binomial()))\n  ll_full <- logLik(model)\n  \n  # R²\n  cs_r2 <- 1 - exp((2 / n) * (ll_null - ll_full))\n  nag_r2 <- cs_r2 / (1 - exp((2 / n) * as.numeric(ll_null)))\n  \n  # Brier\n  brier <- mean((predicted_prob - actual)^2)\n  \n  # ROC-AUC\n  roc_obj <- pROC::roc(actual, predicted_prob)\n  auc_val <- pROC::auc(roc_obj)\n  \n  # Optimal threshold\n  preds <- data.frame(1, actual, predicted_prob)\n  opt_thresh <- optimal.thresholds(preds)$predicted_prob[3]\n  predicted_class <- ifelse(predicted_prob > opt_thresh, 1, 0)\n  accuracy <- mean(predicted_class == actual)\n  \n  # Confusion matrix\n  conf <- caret::confusionMatrix(\n    factor(predicted_class), \n    factor(actual), \n    mode = \"everything\", \n    positive = \"1\"\n  )\n  \n  # PR-AUC via bootstrap\n  pr_auc_fun <- function(y, p) {\n    y <- as.integer(y)\n    if (length(unique(y)) < 2) return(NA_real_)\n    PRROC::pr.curve(scores.class0 = p[y == 1],\n                    scores.class1 = p[y == 0],\n                    curve = FALSE)$auc.integral\n  }\n  \n  pr_apparent <- pr_auc_fun(actual, predicted_prob)\n  opt_vec <- numeric(B_boot)\n  for (b in 1:B_boot) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    y_boot <- dat_boot[[resp_col]]\n    p_boot <- predict(fit_b, type = \"fitted\")\n    p_test_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    opt_vec[b] <- pr_auc_fun(y_boot, p_boot) - pr_auc_fun(actual, p_test_orig)\n}\n  pr_corrected <- pr_apparent - mean(na.omit(opt_vec))\n  \n  list(\n    cs_r2 = cs_r2,\n    nag_r2 = nag_r2,\n    brier = brier,\n    auc_roc = auc_val,\n    accuracy = accuracy,\n    conf_matrix = conf,\n    pr_auc = pr_corrected,\n    opt_threshold = opt_thresh\n  )\n}\n```\n\n### LM1\n\n```{r}\nres_LM1 <- evaluate_logistic(m_logistic, df_predictors, \"epidemic\")\n```\n\n### LM2\n\n```{r}\nres_LM2 <- evaluate_logistic(m_logistic2, df_predictors, \"epidemic\")\n```\n\n### LM3\n\n```{r}\nres_LM3 <- evaluate_logistic(m_logistic3, df_predictors, \"epidemic\")\n```\n\n## Models validation\n\nPerform internal validation using bootstrap and cross-validation. PR-AUC is calculated with bootstrap optimism correction to estimate the expected performance on new data.\n\n### LM1\n\n```{r}\npredicted_prob <- predict(m_logistic, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(m_logistic, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(m_logistic, method = \"boot\", B = 1000)\nprint(validation_boot)\n\nvalidation_cv <- validate(m_logistic, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n\n```\n\n```{r}\npr_auc_bootstrap <- function(model, data, response, B = 1000, seed = 123) {\n  set.seed(seed)\n  \n  # Internal function to compute PR-AUC\n  pr_auc_fun <- function(y, p) {\n    y <- as.integer(y)\n    if (length(unique(y)) < 2) return(NA_real_)\n    PRROC::pr.curve(\n      scores.class0 = p[y == 1],\n      scores.class1 = p[y == 0],\n      curve = FALSE\n    )$auc.integral\n  }\n  \n  # Extract response and predicted probabilities\n  y_full <- data[[response]]\n  p_full <- predict(model, type = \"fitted\")\n  \n  # Apparent PR-AUC\n  pr_apparent <- pr_auc_fun(y_full, p_full)\n  \n  # Bootstrap to estimate optimism\n  n <- nrow(data)\n  opt_vec <- numeric(B)\n  for (b in 1:B) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    \n    y_boot <- dat_boot[[response]]\n    p_boot <- predict(fit_b, type = \"fitted\")\n    pr_apparent_b <- pr_auc_fun(y_boot, p_boot)\n    \n    p_test_on_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    pr_test_b <- pr_auc_fun(y_full, p_test_on_orig)\n    \n    opt_vec[b] <- pr_apparent_b - pr_test_b\n  }\n  \n  opt_mean <- mean(na.omit(opt_vec))\n  pr_corrected <- pr_apparent - opt_mean\n  \n  # Bootstrap percentile confidence interval\n  pr_test_vec <- numeric(B)\n  for (b in 1:B) {\n    idx_boot <- sample.int(n, replace = TRUE)\n    dat_boot <- data[idx_boot, , drop = FALSE]\n    fit_b <- update(model, data = dat_boot)\n    p_test_on_orig <- predict(fit_b, newdata = data, type = \"fitted\")\n    pr_test_vec[b] <- pr_auc_fun(y_full, p_test_on_orig)\n  }\n  \n  ci <- quantile(na.omit(pr_test_vec), c(0.025, 0.975))\n  \n  # Return results as a list\n  list(\n    pr_apparent = pr_apparent,\n    pr_corrected = pr_corrected,\n    optimism = opt_mean,\n    ci_95 = ci\n  )\n}\n\n```\n\n```{r}\nres_LM1 <- pr_auc_bootstrap(m_logistic, df_predictors, \"epidemic\")\nres_LM1\n```\n\n### LM2\n\n```{r}\npredicted_prob <- predict(m_logistic2, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic2, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(m_logistic2, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(m_logistic2, method = \"boot\", B = 1000)\nprint(validation_boot)\n\n\nvalidation_cv <- validate(m_logistic2, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n\n```\n\n```{r}\nres_LM2 <- pr_auc_bootstrap(m_logistic2, df_predictors, \"epidemic\")\nres_LM2\n```\n\n### LM3\n\n```{r}\npredicted_prob <- predict(m_logistic3, type = \"fitted\")\nactual <- df_predictors$epidemic\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(m_logistic3, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(m_logistic3, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(m_logistic3, method = \"boot\", B = 1000)\nprint(validation_boot)\n\nvalidation_cv <- validate(m_logistic3, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n```\n\n```{r}\nres_LM3 <- pr_auc_bootstrap(m_logistic3, df_predictors, \"epidemic\")\nres_LM3\n```\n\n# Ensemble Models\n\n```{r}\n# Fit base models and get probabilities\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n```\n\nCreate ensemble predictions:\n\n### Unweighted\n\n```{r}\n# Simple mean of predicted probabilities\n\nensemble_unw   <- (p1 + p2 + p3) / 3\n```\n\n### Majorityard vote\n\n```{r}\n# Define cutpoints for each base model\ncut_p1 <- 0.530\ncut_p2 <- 0.51\ncut_p3 <- 0.460\n\n# Convert predicted probabilities to binary classification\nclass_p1 <- ifelse(p1 >= cut_p1, 1, 0)\nclass_p2 <- ifelse(p2 >= cut_p2, 1, 0)\nclass_p3 <- ifelse(p3 >= cut_p3, 1, 0)\n\n# Majority vote function\nhard_vote <- function(...) {\n  votes <- c(...)\n  if (sum(votes) >= ceiling(length(votes)/2)) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n\n# Apply hard vote across observations\nensemble_hard <- mapply(hard_vote, class_p1, class_p2, class_p3)\n```\n\n### Stacked ensemble\n\n```{r}\n# Use base model predictions as features in a meta logistic regression model\n\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\n\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\nprint(meta_model)\n```\n\n## Ensenble models metrics\n\nMetrics: Brier score, optimal threshold, accuracy, confusion matrix, Youden index\n\n```{r}\nevaluate_ensemble <- function(predicted_prob, actual) {\n  brier_score <- mean((predicted_prob - actual)^2)\n  \n  # Optimal threshold\n  preds <- data.frame(1, actual, predicted_prob)\n  o <- optimal.thresholds(preds)\n  threshold <- o$predicted_prob[3]\n  \n  # Binary classification and accuracy\n  predicted <- ifelse(predicted_prob > threshold, 1, 0)\n  accuracy <- mean(predicted == actual)\n  \n  # Confusion matrix\n  cmax <- confusionMatrix(\n    data = as.factor(predicted),\n    reference = as.factor(actual),\n    mode = \"everything\",\n    positive = \"1\"\n  )\n  Sensitivity <- cmax$byClass[\"Sensitivity\"]\n  Specificity <- cmax$byClass[\"Specificity\"]\n  Youden <- Sensitivity + Specificity - 1\n  \n  list(\n    Brier = brier_score,\n    Threshold = threshold,\n    Accuracy = accuracy,\n    Sensitivity = Sensitivity,\n    Specificity = Specificity,\n    Youden = Youden\n  )\n}\n```\n\n### Unweighted\n\n```{r}\nactual <- df_predictors$epidemic\nres_unw <- evaluate_ensemble(ensemble_unw, actual)\nres_unw\n```\n\n### Majority vote\n\n```{r}\nres_hard <- evaluate_ensemble(ensemble_hard, actual)\nres_hard\n```\n\n### Stacked\n\n```{r}\nres_stack <- evaluate_ensemble(ensemble_stack, actual)\nres_stack\n```\n\n## Ensemble models validation\n\nBootstrap procedure to estimate variability of AUC, Brier score, and PR-AUC.\n\nFunction adapted for ensemble bootstrap metrics (Unweighted / Hard vote)\n\n```{r}\nensemble_metrics_bootstrap <- function(data, type = c(\"unweighted\", \"hard\"), \n                                       B = 1000, cutpoints = c(0.53, 0.51, 0.46), seed = 123) {\n  set.seed(seed)\n  type <- match.arg(type)\n  \n  n <- nrow(data)\n  aucs <- numeric(B)\n  briers <- numeric(B)\n  pr_aucs <- numeric(B)\n  \n  for (b in 1:B) {\n    # 1️⃣ Resample\n    idx <- sample(1:n, size = n, replace = TRUE)\n    boot_data <- data[idx, ]\n    \n    # 2️⃣ Fit base models\n    m1 <- lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = boot_data, x=TRUE, y=TRUE)\n    m2 <- lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = boot_data, x=TRUE, y=TRUE)\n    m3 <- lrm(factor(epidemic) ~ tmin + prec2, data = boot_data, x=TRUE, y=TRUE)\n    \n    # 3️⃣ Predictions\n    p1b <- predict(m1, type = \"fitted\")\n    p2b <- predict(m2, type = \"fitted\")\n    p3b <- predict(m3, type = \"fitted\")\n    \n    # 4️⃣ Ensemble\n    if (type == \"unweighted\") {\n      ens_b <- (p1b + p2b + p3b)/3\n    } else if (type == \"hard\") {\n      class_p1 <- ifelse(p1b >= cutpoints[1], 1, 0)\n      class_p2 <- ifelse(p2b >= cutpoints[2], 1, 0)\n      class_p3 <- ifelse(p3b >= cutpoints[3], 1, 0)\n      # Softified probability for metrics (proportion of votes)\n      ens_b <- (class_p1 + class_p2 + class_p3)/3\n    }\n    \n    # 5️⃣ Metrics\n    aucs[b] <- as.numeric(roc(boot_data$epidemic, ens_b)$auc)\n    briers[b] <- mean((ens_b - as.numeric(boot_data$epidemic))^2)\n    pr <- pr.curve(scores.class0 = ens_b[boot_data$epidemic==1],\n                   scores.class1 = ens_b[boot_data$epidemic==0],\n                   curve = FALSE)\n    pr_aucs[b] <- pr$auc.integral\n  }\n  \n  list(AUC = aucs, Brier = briers, PR_AUC = pr_aucs)\n}\n```\n\n### Unweighted\n\n```{r}\nres_unweighted <- ensemble_metrics_bootstrap(df_predictors, type = \"unweighted\", B = 1000)\nmean(res_unweighted$AUC)\nmean(res_unweighted$Brier)\nmean(res_unweighted$PR_AUC)\n```\n\n### Majority vote\n\n```{r}\nres_hard <- ensemble_metrics_bootstrap(df_predictors, type = \"hard\", B = 1000)\nmean(res_hard$AUC)\nmean(res_hard$Brier)\nmean(res_hard$PR_AUC)\n```\n\n### Stacked\n\nStacked ensemble calibration and validation\n\n```{r}\ndd <- datadist(stack_data)\n\noptions(datadist = \"dd\")\n\nfit_stacked <- lrm(epidemic ~ p1 + p2 + p3, data = stack_data, x = TRUE, y = TRUE)\n\n# Calibration: bootstrap and cross-validation\ncal_boot <- calibrate(fit_stacked, method = \"boot\", B = 1000)\nplot(cal_boot, main = \"Calibration Plot (Bootstrap)\", col = \"red\")\n\ncal_cv <- calibrate(fit_stacked, method = \"crossvalidation\", B = 10)\nplot(cal_cv, main = \"Calibration Plot (Cross-validation)\")\n\n# rms-style calibration plot\nval.prob(predicted_prob, actual, pl = TRUE, smooth = TRUE)\n\n# Internal validation\nvalidation_boot <- validate(fit_stacked, method = \"boot\", B = 1000)\nprint(validation_boot)\n\nvalidation_cv <- validate(fit_stacked, method = \"crossvalidation\", B = 10)\nprint(validation_cv)\n\n# Extract corrected AUC from Dxy\nDxy <- validation_boot[\"Dxy\", \"index.corrected\"]\nB <- validation_boot[\"B\", \"index.corrected\"]\nauc <- (Dxy + 1) / 2\nB\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"logistic_models2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":"visual","theme":{"light":"flatly","dark":"superhero"},"title":"","message":false,"editor_options":{"chunk_output_type":"inline"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}