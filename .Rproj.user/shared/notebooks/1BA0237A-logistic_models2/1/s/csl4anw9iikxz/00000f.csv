"0","evaluate_logistic <- function(model, data, resp_col, B_boot = 1000) {"
"0","  n <- nrow(data)"
"0","  actual <- data[[resp_col]]"
"0","  predicted_prob <- predict(model, type = ""fitted"")"
"0","  "
"0","  # Log-likelihoods"
"0","  ll_null <- logLik(glm(as.formula(paste(resp_col, ""~ 1"")), data = data, family = binomial()))"
"0","  ll_full <- logLik(model)"
"0","  "
"0","  # RÂ²"
"0","  cs_r2 <- 1 - exp((2 / n) * (ll_null - ll_full))"
"0","  nag_r2 <- cs_r2 / (1 - exp((2 / n) * as.numeric(ll_null)))"
"0","  "
"0","  # Brier"
"0","  brier <- mean((predicted_prob - actual)^2)"
"0","  "
"0","  # ROC-AUC"
"0","  roc_obj <- pROC::roc(actual, predicted_prob)"
"0","  auc_val <- pROC::auc(roc_obj)"
"0","  "
"0","  # Optimal threshold"
"0","  preds <- data.frame(1, actual, predicted_prob)"
"0","  opt_thresh <- optimal.thresholds(preds)$predicted_prob[3]"
"0","  predicted_class <- ifelse(predicted_prob > opt_thresh, 1, 0)"
"0","  accuracy <- mean(predicted_class == actual)"
"0","  "
"0","  # Confusion matrix"
"0","  conf <- caret::confusionMatrix("
"0","    factor(predicted_class), "
"0","    factor(actual), "
"0","    mode = ""everything"", "
"0","    positive = ""1"""
"0","  )"
"0","  "
"0","  # PR-AUC via bootstrap"
"0","  pr_auc_fun <- function(y, p) {"
"0","    y <- as.integer(y)"
"0","    if (length(unique(y)) < 2) return(NA_real_)"
"0","    PRROC::pr.curve(scores.class0 = p[y == 1],"
"0","                    scores.class1 = p[y == 0],"
"0","                    curve = FALSE)$auc.integral"
"0","  }"
"0","  "
"0","  pr_apparent <- pr_auc_fun(actual, predicted_prob)"
"0","  opt_vec <- numeric(B_boot)"
"0","  for (b in 1:B_boot) {"
"0","    idx_boot <- sample.int(n, replace = TRUE)"
"0","    dat_boot <- data[idx_boot, , drop = FALSE]"
"0","    fit_b <- update(model, data = dat_boot)"
"0","    y_boot <- dat_boot[[resp_col]]"
"0","    p_boot <- predict(fit_b, type = ""fitted"")"
"0","    p_test_orig <- predict(fit_b, newdata = data, type = ""fitted"")"
"0","    opt_vec[b] <- pr_auc_fun(y_boot, p_boot) - pr_auc_fun(actual, p_test_orig)"
"0","}"
"0","  pr_corrected <- pr_apparent - mean(na.omit(opt_vec))"
"0","  "
"0","  list("
"0","    cs_r2 = cs_r2,"
"0","    nag_r2 = nag_r2,"
"0","    brier = brier,"
"0","    auc_roc = auc_val,"
"0","    accuracy = accuracy,"
"0","    conf_matrix = conf,"
"0","    pr_auc = pr_corrected,"
"0","    opt_threshold = opt_thresh"
"0","  )"
"0","}"
