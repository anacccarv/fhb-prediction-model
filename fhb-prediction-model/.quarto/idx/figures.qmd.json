{"title":"Figures","markdown":{"yaml":{"title":"Figures","message":false,"warning":false},"headingText":"Figures","containsRefs":false,"markdown":"\nHere is the code for all figures of the paper.\n\n# Libraries:\n\n```{r}\nlibrary(gsheet)\nlibrary(readxl)\nlibrary(ggtext)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(patchwork)\nlibrary(car)\nlibrary(rms)\nlibrary(scales)\nlibrary(caret)\n# tidyfun is currently not on CRAN. You can install the development version from GitHub with:\n# # install.packages(\"pak\")\n#pak::pak(\"tidyfun/tidyfun\")\nlibrary(tidyfun)\n# Kaique dos S. Alves modifications to the geom-spaghetti function (updated ggplot linewidth instead of size):\nsource(here::here(\"geom-spaghetti.R\"))\n```\n\nGeom-spaghetti.R source: https://doi.org/10.17605/OSF.IO/V53PY\n\n# Data\n\n```{r}\n\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\ndata <- data %>%\n  filter(!study %in% 126:150)\n\ndata_nasa <- data_nasa %>%\n  filter(!study %in% 126:150)\n```\n\n# Figure 1:\n\n```{r}\nitp.curves <- function(data, variable, sig_days = NULL, .ylab = NULL) {\n  var_sym <- rlang::enquo(variable)\n  \n  p <- suppressMessages(\n    data %>%\n      dplyr::select(study, days, epidemic, !!var_sym) %>%\n      tf_nest(!!var_sym, .id = study, .arg = days) %>%\n      dplyr::group_by(epidemic) %>%\n      dplyr::summarize(var_mean = mean(!!var_sym)) %>%\n      dplyr::mutate(smooth_mean = tfb(var_mean)) %>%\n      ggplot(aes(tf = smooth_mean, color = factor(epidemic))) +\n      geom_spaghetti(linewidth = 2, alpha = 1) +\n      scale_x_continuous(breaks = seq(-28, 28, by = 4)) +\n      geom_vline(xintercept = 0, color = \"gray\", linetype = \"dashed\") +\n      ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n      theme_bw() +\n      labs(x = \"Days relative to event\",\n           y = .ylab,\n           color = \"Epidemic status\") +\n      theme(axis.title.y = element_text(size = 12),\n            axis.title.x = element_text(size = 12),\n            axis.text.x = element_text(size = 9),\n            axis.text.y = element_text(size = 9),\n            legend.position = \"bottom\")\n  )\n  \n  # Adiciona o sombreado dos dias significativos (se houver)\n  if (!is.null(sig_days)) {\n    for (d in sig_days) {\n      p <- p + annotate(\"rect\", xmin = d - 0.5, xmax = d + 0.5, ymin = -Inf, ymax = Inf,\n                        fill = \"gray40\", alpha = 0.3)\n    }\n  }\n  \n  return(p)\n}\n```\n\n```{r}\nitp_rh <- c(5, 6, 7, 8, 9, 10)\n\nrh_curves <- itp.curves(data, RH2M, sig_days  = itp_rh, .ylab = \"Relative humidity (%)\")\n```\n\n```{r}\nitp_tmin <- 2:10\n\ntmin_curves <- itp.curves(data, T2M_MIN, sig_days = itp_tmin, .ylab = \"Min Temperature (°C)\")\n```\n\n```{r}\nitp_tdew <- 4:10\n\ntdew_curves <- itp.curves(data_nasa, T2MDEW, sig_days = itp_tdew, .ylab = \"Dew point (°C)\")\n```\n\n```{r}\nitp_prec <- 6:10\n\nprec_curves <- itp.curves(data_nasa, PRECTOTCORR, sig_days = itp_prec, .ylab = \"Precipitation (mm)\")\n```\n\n### boxplots\n\n```{r}\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n```\n\n```{r}\np_tmin1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), tmin, color = factor(epidemic))) +\n  geom_boxplot(fill = NA, linewidth = 0.9) +  # fill = NA para não colorir interior\n  labs(y = \"Tmin<sub>2_10</sub> (°C)\", x = \"Epidemic\") +\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # habilita Markdown no eixo Y\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",            # opcional\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n    )\n \np_dew1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), dew, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9) +\n  labs(y = \"Tdew<sub>4_10</sub> (°C)\", x = \"Epidemic\")+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )\n\np_rh1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), rh, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9)+\n  labs(x = \"Epidemic\", y = \"RH<sub>5_10</sub> (%)\")+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n      )\n\np_prec1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), prec2, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9)+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  labs(x = \"Epidemic\", y = \"PREC<sub>6_10</sub> (mm)\")+\n    theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n    )\n```\n\n```{r}\n(tmin_curves | p_tmin1) /\n(rh_curves | p_rh1) /\n(tdew_curves | p_dew1) /\n(prec_curves | p_prec1) +\n  plot_layout(guides = \"collect\") &  # coleta todas as legendas em uma só\n  theme(legend.position = \"bottom\") &  # define a posição da legenda\n    plot_annotation(tag_levels = \"A\")\n```\n\n# Figure 2:\n\n```{r}\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n\n# Real\nactual <- df_predictors$epidemic\n\n# # Ensembles\nensemble_unw   <- (p1 + p2 + p3) / 3\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\n\n```\n\n```{r}\n# Hard vote\n# Cut-points para classificação binária\ncut_p1 <- 0.530\ncut_p2 <- 0.51\ncut_p3 <- 0.460\n\n# Classificações binárias\nclass_p1 <- ifelse(p1 >= cut_p1, 1, 0)\nclass_p2 <- ifelse(p2 >= cut_p2, 1, 0)\nclass_p3 <- ifelse(p3 >= cut_p3, 1, 0)\n\n# Função votação majoritária\nhard_vote <- function(...) {\n  votes <- c(...)\n  if (sum(votes) >= ceiling(length(votes)/2)) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n\n# Aplica a votação majoritária para cada observação\nensemble_hard <- mapply(hard_vote, class_p1, class_p2, class_p3)\n\n```\n\n```{r}\n#-----------------------------------------------------\n# Function to compute evaluation metrics for a model\n#-----------------------------------------------------\nevaluate_model <- function(probs, threshold = 0.5, name = \"model\", type = \"base\") {\n  pred <- ifelse(probs >= threshold, 1, 0)\n  cm <- confusionMatrix(factor(pred), reference = as.factor(actual), positive = \"1\")\n  data.frame(\n    Model = name,\n    Type = type,\n    Accuracy = cm$overall[\"Accuracy\"],\n    Sensitivity = cm$byClass[\"Sensitivity\"],\n    Specificity = cm$byClass[\"Specificity\"]\n  )\n}\n\n#-------------------------------------------------\n# Evaluate all models and bind into a single table\n#-------------------------------------------------\neval_df <- rbind(\n  evaluate_model(p1, 0.53, \"LM1\", \"Base\"),\n  evaluate_model(p2, 0.51, \"LM2\", \"Base\"),\n  evaluate_model(p3, 0.46, \"LM3\", \"Base\"),\n  evaluate_model(ensemble_unw, 0.475, \"UNW\", \"Ensemble\"),\n  evaluate_model(ensemble_hard, 0.5, \"HRD\", \"Ensemble\"),\n  evaluate_model(ensemble_stack, 0.47, \"STACK\", \"Ensemble\")\n)\n\n# Add Youden index to eval_df and sort\neval_df$Youden <- with(eval_df, Sensitivity + Specificity - 1)\n\n# Factor Model by sorted order for consistent legend\neval_df$Model <- factor(eval_df$Model, levels = eval_df$Model)\n\neval_df <- eval_df %>%\n  mutate(\n  ROC_AUC = case_when(\n    Model == \"LM1\"  ~ 0.798,\n    Model == \"LM2\"  ~ 0.792,\n    Model == \"LM3\"  ~ 0.814,\n    Model == \"UNW\"  ~ 0.842,\n    Model == \"HRD\"  ~ 0.811,\n    Model == \"STACK\"~ 0.826\n  ),\n  PR_AUC = case_when(\n    Model == \"LM1\"  ~ 0.742,\n    Model == \"LM2\"  ~ 0.754,\n    Model == \"LM3\"  ~ 0.720,\n    Model == \"UNW\"  ~ 0.796,\n    Model == \"HRD\"  ~ 0.758,\n    Model == \"STACK\"~ 0.784\n  ))\n\n# View table\nprint(eval_df)\n```\n\n```{r}\na <- ggplot(eval_df, aes(x = Accuracy, y = Youden, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  scale_shape_manual(values = c(Base = 16, Ensemble = 17)) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"Accuracy\", y = \"Youden index\", size = \"AUC\") +\n  theme_bw() +\n  xlim(0.75, 0.85) +\n  ylim(0.5, 0.7) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + # coloca a legenda dentro do gráfico (coordenadas normalizadas) )\n        guides(color = guide_legend(nrow = 1),  shape = \"none\") +# oculta legenda do Type\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         # controla o tamanho mínimo e máximo dos pontos\n  breaks = c(0.80, 0.81, 0.82, 0.83), # define quais valores vão aparecer na legenda\n  labels = scales::number_format(accuracy = 0.01) # formata os números na legenda\n)\n\nb <- ggplot(eval_df, aes(x = Sensitivity , y = Specificity, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"Sensitivity\", y = \"Specificity\", size = \"AUC\") +\n  theme_bw() +\n  xlim(0.6, 0.8) +\n  ylim(0.825, 0.90) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + # coloca a legenda dentro do gráfico (coordenadas normalizadas) )\n        guides(color = guide_legend(nrow = 1), shape = \"none\") +# oculta legenda do Type\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         # controla o tamanho mínimo e máximo dos pontos\n  breaks = c(0.80, 0.81, 0.82, 0.83), # define quais valores vão aparecer na legenda\n  labels = scales::number_format(accuracy = 0.01) # formata os números na legenda\n)\n\nc <- ggplot(eval_df, aes(x = ROC_AUC, y = PR_AUC, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  scale_shape_manual(values = c(Base = 16, Ensemble = 17)) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"ROC_AUC\", y = \"PR_AUC\") +\n  theme_bw() +\n  xlim(0.775, 0.85) +\n  ylim(0.715, 0.80) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + # coloca a legenda dentro do gráfico (coordenadas normalizadas) )\n        guides(color = guide_legend(nrow = 1),  shape = \"none\") +# oculta legenda do Type\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         # controla o tamanho mínimo e máximo dos pontos\n  breaks = c(0.80, 0.81, 0.82, 0.83), # define quais valores vão aparecer na legenda\n  labels = scales::number_format(accuracy = 0.01) # formata os números na legenda\n)\n\n#a + b + c + guide_area() +\n#  plot_layout(guides = 'collect')\n\n(a/b/c) +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(tag_levels = \"A\")& \n  theme(legend.position = \"bottom\")\n\n\n```\n\n# Figure 3:\n\n```{r}\ndf_preds <- data.frame(\n  epidemic = df_predictors$epidemic,  # variável resposta observada\n  LM1   = predict(models$model1, type = \"fitted\"),\n  LM2   = predict(models$model2, type = \"fitted\"),\n  LM3   = predict(models$model3, type = \"fitted\"),\n  UNW   = (predict(models$model1, type = \"fitted\") + predict(models$model2, type = \"fitted\") + predict(models$model3, type = \"fitted\")) / 3,\n  WGT   = 0.102 * predict(models$model1, type = \"fitted\") + 0.43  * predict(models$model2, type = \"fitted\") + 0.46  * predict(models$model3, type = \"fitted\"),\n  STACK = predict(meta_model, type = \"response\")\n)\n\n# 2. Colocar em formato longo\ndf_long <- df_preds %>%\n  pivot_longer(\n    cols = -epidemic,\n    names_to = \"model\",\n    values_to = \"prob\"\n  )\n\ndf_long <- df_long %>%\n  mutate(epidemic_f = factor(epidemic, levels = c(0, 1),\n                             labels = c(\"Non-epidemic\", \"Epidemic\")))\n\n# 3. Histograma das probabilidades previstas\nggplot(df_long, aes(x = prob, fill = factor(epidemic), color = factor(epidemic))) +\n  geom_histogram(bins = 20, linewidth = 0.8, alpha = 0.8, position = \"identity\") +\n  facet_grid(model ~ epidemic_f) +\n  labs(x = \"Model-fitted probability\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"0\" = \"#4970b5\", \"1\" = \"#ed7d31\"),\n                    labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  scale_color_manual(values = c(\"0\" = \"#4970b5\", \"1\" = \"#ed7d31\")) +\n  theme_bw() +\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )\n\n```\n\n# Figure 4:\n\n```{r}\nres <- read.csv(\"plan/res.csv\")\n\npA <- ggplot(res, aes(pt, NMB_mean)) +\n  geom_ribbon(aes(ymin = NMB_lo, ymax = NMB_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_hline(yintercept = 0, linetype = 2, color = \"gray60\") +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n    y = expression(\"Mean NMB (USD/ha per decision unit)\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\npB <- ggplot(res, aes(pt, Pr_pos)) +\n  annotate(\"rect\", ymin = 0.5, ymax = 0.8, xmin = -Inf, xmax = Inf,\n                        fill = \"#4970b5\", alpha = 0.2)+\n  geom_line(size = 1.5, , color = \"#ED7D31\") +\n  geom_hline(yintercept = 0.5, linetype = 2, color = \"gray60\") +\n  geom_hline(yintercept = 0.8, linetype = 2, color = \"gray60\") +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0,1)) +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"Probability of NMB > 0\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\n\n(pA | pB)+\n      plot_annotation(tag_levels = \"A\")\n\nggsave(\"imagem_NMB.png\", dpi = 300, bg = \"white\", width = 11, height = 6)\n\n```\n\n# Figure Supplementar 1:\n\n```{r}\n# Set up datadist for rms\ndd <- datadist(df_predictors)\noptions(datadist = \"dd\")\n```\n\n```{r}\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predictive plot\n\npred_obj <- Predict(models$model1, fun = plogis, conf.int = 0.95)\n\n# Converte em data.frame\npred_df <- as.data.frame(pred_obj)\n\npred_df_tmin <- pred_df |> \n  filter(.predictor. == \"tmin\")\n\npred_df_rh <- pred_df |> \n  filter(.predictor. == \"rh\")\n\ntmin_spline <- ggplot(pred_df_tmin, aes(x = tmin, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"Tmin<sub>2_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\n\nrh_spline <- ggplot(pred_df_rh, aes(x = rh, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"RH<sub>5_10</sub> (%)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\ntmin_spline | rh_spline\n```\n\n```{r}\n# Predictive plot\n\npred_obj2 <- Predict(models$model2, fun = plogis, conf.int = 0.95)\n\n# Converte em data.frame\npred_df2 <- as.data.frame(pred_obj2)\n\npred_df_dew <- pred_df2 |> \n  filter(.predictor. == \"dew\")\n\npred_df2_rh <- pred_df2 |> \n  filter(.predictor. == \"rh\")\n\n\ntdew_spline <- ggplot(pred_df_dew, aes(x = dew, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"Tdew<sub>4_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\n\nrh2_spline <- ggplot(pred_df2_rh, aes(x = rh, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"RH<sub>5_10</sub> (%)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\ntdew_spline | rh2_spline\n\n```\n\n```{r}\npred_obj3 <- Predict(models$model3, fun = plogis, conf.int = 0.95)\n\n# Converte em data.frame\npred_df3 <- as.data.frame(pred_obj3)\n\npred_df_rain <- pred_df3 |> \n  filter(.predictor. == \"prec2\")\n\npred_df3_tmin <- pred_df3 |> \n  filter(.predictor. == \"tmin\")\n\nprec_spline <- ggplot(pred_df_rain, aes(x = prec2, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", size = 1.5) +\n  labs(x = \"PREC<sub>6_10</sub> (mm)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))+\n  scale_x_continuous(breaks = pretty_breaks(n = 5))\n\n\ntmin3_spline <- ggplot(pred_df3_tmin, aes(x = tmin, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", size = 1.5) +\n  labs(x = \"Tmin<sub>2_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))+\n  scale_x_continuous(breaks = pretty_breaks(n = 5))\n\nprec_spline | tmin3_spline\n```\n\n```{r}\n(tmin_spline | rh_spline) /\n(rh2_spline | tdew_spline) /\n(tmin3_spline | prec_spline) +\n  plot_annotation(tag_levels = \"A\")\n```\n\n# Figure Supplementar 2:\n\n```{r}\npD1 <- ggplot(res, aes(pt, NMB_trat_mean)) +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_hline(yintercept = 0, linetype = 2, color = \"gray60\") +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"NMB per treated unit (USD/ha)\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\npD2 <- ggplot(res, aes(pt, PPV)) +\n  geom_ribbon(aes(ymin = PPV_req_lo, ymax = PPV_req_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_line(aes(y = PPV_req_med), linetype = 2, color = \"gray60\") +\n  scale_y_continuous(limits = c(0,1), labels = scales::percent) +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"Observed PPV vs. required PPV (C/B)\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\n(pD1 | pD2)+\n      plot_annotation(tag_levels = \"A\")\n\n```\n\n# Figure Supplementar:\n\n```{r}\ntable <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1MBiKsosQ8Hob6LkS65_1pPU25hx1CO9i42Sm_xf28ww/edit?gid=0#gid=0\") |> \n  dplyr::select(study, year, location, state, lat, lon, planting_date, cultivar, index, daa_mean, flowering) |> \n  filter(study %in% 1:101)\n```\n\n```{r}\ntable |> \n  ggplot(aes(location, daa_mean))+\n  geom_boxplot(color = \"#ed7d31\",linewidth = 0.9)+\n      labs(y = \"Days until anthesis\", x = \"Trial location\")+\n    theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(n.breaks = 6)\n\ntable |> \n  ggplot(aes(daa_mean, location))+\n  geom_boxplot(color = \"#ed7d31\",linewidth = 0.9)+\n    labs(y = \"Trial location\", x = \"Days until anthesis\")+\n    theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_x_continuous(n.breaks = 6)\n\n```\n\n# Figure Supplementar:\n\n```{r}\ntable <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1MBiKsosQ8Hob6LkS65_1pPU25hx1CO9i42Sm_xf28ww/edit?gid=0#gid=0\") |> \n  dplyr::select(study, year, location, state, lat, lon, planting_date, cultivar, index, daa_mean, flowering) |> \n  mutate(epidemic = if_else(index >= 10, 1, 0)) |> \n  filter(study %in% 1:125,\n         epidemic == 1)\n\ntable |> \n  ggplot(aes(x = index)) +\n  geom_histogram(bins = 15, linewidth = 0.8, alpha = 0.8, position = \"identity\", color = \"#ed7d31\", fill = \"#ed7d31\")+ \n  labs(x = \"FHB index\",\n       y = \"Count\")+\n  theme_bw() +\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(labels = number_format(accuracy = 1)) +\n  scale_x_continuous(labels = number_format(accuracy = 0.1),\n                     breaks = seq(10, 100, 15))\n```\n\n\n","srcMarkdownNoYaml":"\n# Figures\nHere is the code for all figures of the paper.\n\n# Libraries:\n\n```{r}\nlibrary(gsheet)\nlibrary(readxl)\nlibrary(ggtext)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(patchwork)\nlibrary(car)\nlibrary(rms)\nlibrary(scales)\nlibrary(caret)\n# tidyfun is currently not on CRAN. You can install the development version from GitHub with:\n# # install.packages(\"pak\")\n#pak::pak(\"tidyfun/tidyfun\")\nlibrary(tidyfun)\n# Kaique dos S. Alves modifications to the geom-spaghetti function (updated ggplot linewidth instead of size):\nsource(here::here(\"geom-spaghetti.R\"))\n```\n\nGeom-spaghetti.R source: https://doi.org/10.17605/OSF.IO/V53PY\n\n# Data\n\n```{r}\n\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndata_nasa <- read_csv(\"plan/weather_data_nasa.csv\")\n\ndata <- data %>%\n  filter(!study %in% 126:150)\n\ndata_nasa <- data_nasa %>%\n  filter(!study %in% 126:150)\n```\n\n# Figure 1:\n\n```{r}\nitp.curves <- function(data, variable, sig_days = NULL, .ylab = NULL) {\n  var_sym <- rlang::enquo(variable)\n  \n  p <- suppressMessages(\n    data %>%\n      dplyr::select(study, days, epidemic, !!var_sym) %>%\n      tf_nest(!!var_sym, .id = study, .arg = days) %>%\n      dplyr::group_by(epidemic) %>%\n      dplyr::summarize(var_mean = mean(!!var_sym)) %>%\n      dplyr::mutate(smooth_mean = tfb(var_mean)) %>%\n      ggplot(aes(tf = smooth_mean, color = factor(epidemic))) +\n      geom_spaghetti(linewidth = 2, alpha = 1) +\n      scale_x_continuous(breaks = seq(-28, 28, by = 4)) +\n      geom_vline(xintercept = 0, color = \"gray\", linetype = \"dashed\") +\n      ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n      theme_bw() +\n      labs(x = \"Days relative to event\",\n           y = .ylab,\n           color = \"Epidemic status\") +\n      theme(axis.title.y = element_text(size = 12),\n            axis.title.x = element_text(size = 12),\n            axis.text.x = element_text(size = 9),\n            axis.text.y = element_text(size = 9),\n            legend.position = \"bottom\")\n  )\n  \n  # Adiciona o sombreado dos dias significativos (se houver)\n  if (!is.null(sig_days)) {\n    for (d in sig_days) {\n      p <- p + annotate(\"rect\", xmin = d - 0.5, xmax = d + 0.5, ymin = -Inf, ymax = Inf,\n                        fill = \"gray40\", alpha = 0.3)\n    }\n  }\n  \n  return(p)\n}\n```\n\n```{r}\nitp_rh <- c(5, 6, 7, 8, 9, 10)\n\nrh_curves <- itp.curves(data, RH2M, sig_days  = itp_rh, .ylab = \"Relative humidity (%)\")\n```\n\n```{r}\nitp_tmin <- 2:10\n\ntmin_curves <- itp.curves(data, T2M_MIN, sig_days = itp_tmin, .ylab = \"Min Temperature (°C)\")\n```\n\n```{r}\nitp_tdew <- 4:10\n\ntdew_curves <- itp.curves(data_nasa, T2MDEW, sig_days = itp_tdew, .ylab = \"Dew point (°C)\")\n```\n\n```{r}\nitp_prec <- 6:10\n\nprec_curves <- itp.curves(data_nasa, PRECTOTCORR, sig_days = itp_prec, .ylab = \"Precipitation (mm)\")\n```\n\n### boxplots\n\n```{r}\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n```\n\n```{r}\np_tmin1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), tmin, color = factor(epidemic))) +\n  geom_boxplot(fill = NA, linewidth = 0.9) +  # fill = NA para não colorir interior\n  labs(y = \"Tmin<sub>2_10</sub> (°C)\", x = \"Epidemic\") +\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # habilita Markdown no eixo Y\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",            # opcional\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n    )\n \np_dew1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), dew, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9) +\n  labs(y = \"Tdew<sub>4_10</sub> (°C)\", x = \"Epidemic\")+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )\n\np_rh1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), rh, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9)+\n  labs(x = \"Epidemic\", y = \"RH<sub>5_10</sub> (%)\")+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n      )\n\np_prec1 <- df_predictors |> \n  ggplot(aes(factor(epidemic), prec2, color = factor(epidemic)))+\n  geom_boxplot(fill = NA, linewidth = 0.9)+\n  ggthemes::scale_color_excel_new(labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  theme_bw()+\n  labs(x = \"Epidemic\", y = \"PREC<sub>6_10</sub> (mm)\")+\n    theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n    )\n```\n\n```{r}\n(tmin_curves | p_tmin1) /\n(rh_curves | p_rh1) /\n(tdew_curves | p_dew1) /\n(prec_curves | p_prec1) +\n  plot_layout(guides = \"collect\") &  # coleta todas as legendas em uma só\n  theme(legend.position = \"bottom\") &  # define a posição da legenda\n    plot_annotation(tag_levels = \"A\")\n```\n\n# Figure 2:\n\n```{r}\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n\n# Real\nactual <- df_predictors$epidemic\n\n# # Ensembles\nensemble_unw   <- (p1 + p2 + p3) / 3\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\n\n```\n\n```{r}\n# Hard vote\n# Cut-points para classificação binária\ncut_p1 <- 0.530\ncut_p2 <- 0.51\ncut_p3 <- 0.460\n\n# Classificações binárias\nclass_p1 <- ifelse(p1 >= cut_p1, 1, 0)\nclass_p2 <- ifelse(p2 >= cut_p2, 1, 0)\nclass_p3 <- ifelse(p3 >= cut_p3, 1, 0)\n\n# Função votação majoritária\nhard_vote <- function(...) {\n  votes <- c(...)\n  if (sum(votes) >= ceiling(length(votes)/2)) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n\n# Aplica a votação majoritária para cada observação\nensemble_hard <- mapply(hard_vote, class_p1, class_p2, class_p3)\n\n```\n\n```{r}\n#-----------------------------------------------------\n# Function to compute evaluation metrics for a model\n#-----------------------------------------------------\nevaluate_model <- function(probs, threshold = 0.5, name = \"model\", type = \"base\") {\n  pred <- ifelse(probs >= threshold, 1, 0)\n  cm <- confusionMatrix(factor(pred), reference = as.factor(actual), positive = \"1\")\n  data.frame(\n    Model = name,\n    Type = type,\n    Accuracy = cm$overall[\"Accuracy\"],\n    Sensitivity = cm$byClass[\"Sensitivity\"],\n    Specificity = cm$byClass[\"Specificity\"]\n  )\n}\n\n#-------------------------------------------------\n# Evaluate all models and bind into a single table\n#-------------------------------------------------\neval_df <- rbind(\n  evaluate_model(p1, 0.53, \"LM1\", \"Base\"),\n  evaluate_model(p2, 0.51, \"LM2\", \"Base\"),\n  evaluate_model(p3, 0.46, \"LM3\", \"Base\"),\n  evaluate_model(ensemble_unw, 0.475, \"UNW\", \"Ensemble\"),\n  evaluate_model(ensemble_hard, 0.5, \"HRD\", \"Ensemble\"),\n  evaluate_model(ensemble_stack, 0.47, \"STACK\", \"Ensemble\")\n)\n\n# Add Youden index to eval_df and sort\neval_df$Youden <- with(eval_df, Sensitivity + Specificity - 1)\n\n# Factor Model by sorted order for consistent legend\neval_df$Model <- factor(eval_df$Model, levels = eval_df$Model)\n\neval_df <- eval_df %>%\n  mutate(\n  ROC_AUC = case_when(\n    Model == \"LM1\"  ~ 0.798,\n    Model == \"LM2\"  ~ 0.792,\n    Model == \"LM3\"  ~ 0.814,\n    Model == \"UNW\"  ~ 0.842,\n    Model == \"HRD\"  ~ 0.811,\n    Model == \"STACK\"~ 0.826\n  ),\n  PR_AUC = case_when(\n    Model == \"LM1\"  ~ 0.742,\n    Model == \"LM2\"  ~ 0.754,\n    Model == \"LM3\"  ~ 0.720,\n    Model == \"UNW\"  ~ 0.796,\n    Model == \"HRD\"  ~ 0.758,\n    Model == \"STACK\"~ 0.784\n  ))\n\n# View table\nprint(eval_df)\n```\n\n```{r}\na <- ggplot(eval_df, aes(x = Accuracy, y = Youden, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  scale_shape_manual(values = c(Base = 16, Ensemble = 17)) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"Accuracy\", y = \"Youden index\", size = \"AUC\") +\n  theme_bw() +\n  xlim(0.75, 0.85) +\n  ylim(0.5, 0.7) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + # coloca a legenda dentro do gráfico (coordenadas normalizadas) )\n        guides(color = guide_legend(nrow = 1),  shape = \"none\") +# oculta legenda do Type\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         # controla o tamanho mínimo e máximo dos pontos\n  breaks = c(0.80, 0.81, 0.82, 0.83), # define quais valores vão aparecer na legenda\n  labels = scales::number_format(accuracy = 0.01) # formata os números na legenda\n)\n\nb <- ggplot(eval_df, aes(x = Sensitivity , y = Specificity, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"Sensitivity\", y = \"Specificity\", size = \"AUC\") +\n  theme_bw() +\n  xlim(0.6, 0.8) +\n  ylim(0.825, 0.90) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + # coloca a legenda dentro do gráfico (coordenadas normalizadas) )\n        guides(color = guide_legend(nrow = 1), shape = \"none\") +# oculta legenda do Type\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         # controla o tamanho mínimo e máximo dos pontos\n  breaks = c(0.80, 0.81, 0.82, 0.83), # define quais valores vão aparecer na legenda\n  labels = scales::number_format(accuracy = 0.01) # formata os números na legenda\n)\n\nc <- ggplot(eval_df, aes(x = ROC_AUC, y = PR_AUC, color = Model, shape = Type)) +\n  geom_point(alpha = 0.8, size = 6) +\n  scale_shape_manual(values = c(Base = 16, Ensemble = 17)) +\n  ggthemes::scale_color_excel_new() +\n  labs(x = \"ROC_AUC\", y = \"PR_AUC\") +\n  theme_bw() +\n  xlim(0.775, 0.85) +\n  ylim(0.715, 0.80) +\n  theme(plot.title = element_text(size = 16, hjust = 0.5),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.position = \"bottom\") + # coloca a legenda dentro do gráfico (coordenadas normalizadas) )\n        guides(color = guide_legend(nrow = 1),  shape = \"none\") +# oculta legenda do Type\n  scale_size_continuous(\n  limits = c(0.79, 0.835),\n  range = c(2, 8),         # controla o tamanho mínimo e máximo dos pontos\n  breaks = c(0.80, 0.81, 0.82, 0.83), # define quais valores vão aparecer na legenda\n  labels = scales::number_format(accuracy = 0.01) # formata os números na legenda\n)\n\n#a + b + c + guide_area() +\n#  plot_layout(guides = 'collect')\n\n(a/b/c) +\n  plot_layout(guides = \"collect\") &\n  plot_annotation(tag_levels = \"A\")& \n  theme(legend.position = \"bottom\")\n\n\n```\n\n# Figure 3:\n\n```{r}\ndf_preds <- data.frame(\n  epidemic = df_predictors$epidemic,  # variável resposta observada\n  LM1   = predict(models$model1, type = \"fitted\"),\n  LM2   = predict(models$model2, type = \"fitted\"),\n  LM3   = predict(models$model3, type = \"fitted\"),\n  UNW   = (predict(models$model1, type = \"fitted\") + predict(models$model2, type = \"fitted\") + predict(models$model3, type = \"fitted\")) / 3,\n  WGT   = 0.102 * predict(models$model1, type = \"fitted\") + 0.43  * predict(models$model2, type = \"fitted\") + 0.46  * predict(models$model3, type = \"fitted\"),\n  STACK = predict(meta_model, type = \"response\")\n)\n\n# 2. Colocar em formato longo\ndf_long <- df_preds %>%\n  pivot_longer(\n    cols = -epidemic,\n    names_to = \"model\",\n    values_to = \"prob\"\n  )\n\ndf_long <- df_long %>%\n  mutate(epidemic_f = factor(epidemic, levels = c(0, 1),\n                             labels = c(\"Non-epidemic\", \"Epidemic\")))\n\n# 3. Histograma das probabilidades previstas\nggplot(df_long, aes(x = prob, fill = factor(epidemic), color = factor(epidemic))) +\n  geom_histogram(bins = 20, linewidth = 0.8, alpha = 0.8, position = \"identity\") +\n  facet_grid(model ~ epidemic_f) +\n  labs(x = \"Model-fitted probability\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"0\" = \"#4970b5\", \"1\" = \"#ed7d31\"),\n                    labels = c(\"Non-epidemic\", \"Epidemic\")) +\n  scale_color_manual(values = c(\"0\" = \"#4970b5\", \"1\" = \"#ed7d31\")) +\n  theme_bw() +\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )\n\n```\n\n# Figure 4:\n\n```{r}\nres <- read.csv(\"plan/res.csv\")\n\npA <- ggplot(res, aes(pt, NMB_mean)) +\n  geom_ribbon(aes(ymin = NMB_lo, ymax = NMB_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_hline(yintercept = 0, linetype = 2, color = \"gray60\") +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n    y = expression(\"Mean NMB (USD/ha per decision unit)\")) +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\npB <- ggplot(res, aes(pt, Pr_pos)) +\n  annotate(\"rect\", ymin = 0.5, ymax = 0.8, xmin = -Inf, xmax = Inf,\n                        fill = \"#4970b5\", alpha = 0.2)+\n  geom_line(size = 1.5, , color = \"#ED7D31\") +\n  geom_hline(yintercept = 0.5, linetype = 2, color = \"gray60\") +\n  geom_hline(yintercept = 0.8, linetype = 2, color = \"gray60\") +\n  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0,1)) +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"Probability of NMB > 0\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\n\n(pA | pB)+\n      plot_annotation(tag_levels = \"A\")\n\nggsave(\"imagem_NMB.png\", dpi = 300, bg = \"white\", width = 11, height = 6)\n\n```\n\n# Figure Supplementar 1:\n\n```{r}\n# Set up datadist for rms\ndd <- datadist(df_predictors)\noptions(datadist = \"dd\")\n```\n\n```{r}\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predictive plot\n\npred_obj <- Predict(models$model1, fun = plogis, conf.int = 0.95)\n\n# Converte em data.frame\npred_df <- as.data.frame(pred_obj)\n\npred_df_tmin <- pred_df |> \n  filter(.predictor. == \"tmin\")\n\npred_df_rh <- pred_df |> \n  filter(.predictor. == \"rh\")\n\ntmin_spline <- ggplot(pred_df_tmin, aes(x = tmin, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"Tmin<sub>2_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\n\nrh_spline <- ggplot(pred_df_rh, aes(x = rh, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"RH<sub>5_10</sub> (%)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\ntmin_spline | rh_spline\n```\n\n```{r}\n# Predictive plot\n\npred_obj2 <- Predict(models$model2, fun = plogis, conf.int = 0.95)\n\n# Converte em data.frame\npred_df2 <- as.data.frame(pred_obj2)\n\npred_df_dew <- pred_df2 |> \n  filter(.predictor. == \"dew\")\n\npred_df2_rh <- pred_df2 |> \n  filter(.predictor. == \"rh\")\n\n\ntdew_spline <- ggplot(pred_df_dew, aes(x = dew, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"Tdew<sub>4_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\n\nrh2_spline <- ggplot(pred_df2_rh, aes(x = rh, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", linewidth = 1.5) +\n  labs(x = \"RH<sub>5_10</sub> (%)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))\n\ntdew_spline | rh2_spline\n\n```\n\n```{r}\npred_obj3 <- Predict(models$model3, fun = plogis, conf.int = 0.95)\n\n# Converte em data.frame\npred_df3 <- as.data.frame(pred_obj3)\n\npred_df_rain <- pred_df3 |> \n  filter(.predictor. == \"prec2\")\n\npred_df3_tmin <- pred_df3 |> \n  filter(.predictor. == \"tmin\")\n\nprec_spline <- ggplot(pred_df_rain, aes(x = prec2, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", size = 1.5) +\n  labs(x = \"PREC<sub>6_10</sub> (mm)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))+\n  scale_x_continuous(breaks = pretty_breaks(n = 5))\n\n\ntmin3_spline <- ggplot(pred_df3_tmin, aes(x = tmin, y = yhat)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(color = \"#ed7d31\", size = 1.5) +\n  labs(x = \"Tmin<sub>2_10</sub> (°C)\", y = \"Predicted Probability\") +\n  theme_bw()+\n  theme(\n    axis.title.x = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.y = element_text(size = 12),\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(limits = c(0.00, 1.00), breaks = breaks_width(0.25))+\n  scale_x_continuous(breaks = pretty_breaks(n = 5))\n\nprec_spline | tmin3_spline\n```\n\n```{r}\n(tmin_spline | rh_spline) /\n(rh2_spline | tdew_spline) /\n(tmin3_spline | prec_spline) +\n  plot_annotation(tag_levels = \"A\")\n```\n\n# Figure Supplementar 2:\n\n```{r}\npD1 <- ggplot(res, aes(pt, NMB_trat_mean)) +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_hline(yintercept = 0, linetype = 2, color = \"gray60\") +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"NMB per treated unit (USD/ha)\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\npD2 <- ggplot(res, aes(pt, PPV)) +\n  geom_ribbon(aes(ymin = PPV_req_lo, ymax = PPV_req_hi), alpha = 0.15, fill = \"#4970b5\") +\n  geom_line(size = 1.5, color = \"#ED7D31\") +\n  geom_line(aes(y = PPV_req_med), linetype = 2, color = \"gray60\") +\n  scale_y_continuous(limits = c(0,1), labels = scales::percent) +\n  labs(x = expression(\"Risk threshold (\" * italic(p)[italic(t)] * \")\"),\n       y = \"Observed PPV vs. required PPV (C/B)\") +\n  theme_bw()+\n  theme(\n    axis.title.y = element_text(size = 14),\n    axis.title.x = element_text(size = 14),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10)\n  )\n\n(pD1 | pD2)+\n      plot_annotation(tag_levels = \"A\")\n\n```\n\n# Figure Supplementar:\n\n```{r}\ntable <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1MBiKsosQ8Hob6LkS65_1pPU25hx1CO9i42Sm_xf28ww/edit?gid=0#gid=0\") |> \n  dplyr::select(study, year, location, state, lat, lon, planting_date, cultivar, index, daa_mean, flowering) |> \n  filter(study %in% 1:101)\n```\n\n```{r}\ntable |> \n  ggplot(aes(location, daa_mean))+\n  geom_boxplot(color = \"#ed7d31\",linewidth = 0.9)+\n      labs(y = \"Days until anthesis\", x = \"Trial location\")+\n    theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(n.breaks = 6)\n\ntable |> \n  ggplot(aes(daa_mean, location))+\n  geom_boxplot(color = \"#ed7d31\",linewidth = 0.9)+\n    labs(y = \"Trial location\", x = \"Days until anthesis\")+\n    theme_bw()+\n  theme(\n    axis.title.y = element_markdown(size = 12),  # enable Markdown in Y-axis label\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_x_continuous(n.breaks = 6)\n\n```\n\n# Figure Supplementar:\n\n```{r}\ntable <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1MBiKsosQ8Hob6LkS65_1pPU25hx1CO9i42Sm_xf28ww/edit?gid=0#gid=0\") |> \n  dplyr::select(study, year, location, state, lat, lon, planting_date, cultivar, index, daa_mean, flowering) |> \n  mutate(epidemic = if_else(index >= 10, 1, 0)) |> \n  filter(study %in% 1:125,\n         epidemic == 1)\n\ntable |> \n  ggplot(aes(x = index)) +\n  geom_histogram(bins = 15, linewidth = 0.8, alpha = 0.8, position = \"identity\", color = \"#ed7d31\", fill = \"#ed7d31\")+ \n  labs(x = \"FHB index\",\n       y = \"Count\")+\n  theme_bw() +\n  theme(\n    axis.title.y = element_text(size = 12),\n    axis.title.x = element_text(size = 12),\n    legend.position = \"none\",\n    axis.text.x = element_text(size = 9),\n    axis.text.y = element_text(size = 9)\n  )+\n  scale_y_continuous(labels = number_format(accuracy = 1)) +\n  scale_x_continuous(labels = number_format(accuracy = 0.1),\n                     breaks = seq(10, 100, 15))\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"figures.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","editor":"visual","theme":["cosmo","brand"],"title":"Figures","message":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}