{
  "hash": "272eebc5c3b7a44472cbdd5071e57832",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"\"\nmessage: false\nwarning: false\neditor_options: \n  chunk_output_type: inline\n---\n\n# Libraries\n\nLoad Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(gsheet)\nlibrary(raster)\nlibrary(ncdf4)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(caret)\nlibrary(tidyr)\nlibrary(r4pde)\nlibrary(refund)\nlibrary(readr)\nlibrary(fdatest)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(rms)\nlibrary(pROC)\nlibrary(PresenceAbsence)\nlibrary(OptimalCutpoints)\nlibrary(ggtext)\nlibrary(scales)\nlibrary(PRROC)\nlibrary(patchwork)\n```\n:::\n\n\n# Meta model (Ensemble stack)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_xlsx(\"plan/weather_data_final.xlsx\")\ndf_predictors <- read_xlsx(\"plan/df_predictors.xlsx\")\n\n\nmodels <- list(\n  model1 = lrm(factor(epidemic) ~ tmin + rcs(rh, 4), data = df_predictors, x = TRUE, y = TRUE),\n  model2 = lrm(factor(epidemic) ~ rcs(rh, 4) + rcs(dew, 3), data = df_predictors, x = TRUE, y = TRUE),\n  model3 = lrm(factor(epidemic) ~ tmin + prec2, data = df_predictors, x = TRUE, y = TRUE)\n)\n\n# Predicted probabilities\np1 <- predict(models$model1, type = \"fitted\")\np2 <- predict(models$model2, type = \"fitted\")\np3 <- predict(models$model3, type = \"fitted\")\n\n# Real\nactual <- df_predictors$epidemic\n\n# # Ensembles\nstack_data     <- data.frame(p1 = p1, p2 = p2, p3 = p3, epidemic = factor(df_predictors$epidemic))\nmeta_model     <- glm(epidemic ~ p1 + p2 + p3, data = stack_data, family = binomial)\nensemble_stack <- predict(meta_model, type = \"response\")\n```\n:::\n\n\n# Net Monetary Benefit (NMB)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predicted probabilities and epidemic indicator\np_hat <-  predict(meta_model, type = \"response\")  # Predicted probability of epidemic\ny  <- df_predictors$epidemic                      # Predicted probability of epidemic\n\n# Risk-conditional severity: average index per study\nsev_epid <- data %>% \n  group_by(study) %>% \n  summarise(index = mean(index)) %>% \n  mutate(index = index/100) %>%                   # Convert to fraction\n  filter(index > 0.1) %>%                         # Only meaningful severities\n  pull(index)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define global model parameters for NMB calculation (Duffeck et al. 2020)\n# Yield, yield loss per index point, fungicide efficacy, cost, and crop price\n\n# Monetary values in USD/ha (1 BRL = 0.1878 USD)\n# Conversion rate\nbrl_to_usd <- 0.1878\n\n# Attainable yield (kg/ha)\nY0_kg_ha <- 3645.3\n\n# Yield loss per index point (Duffeck et al. 2020)\nslope_kg <- 49.1\nd_pct <- 100 * slope_kg / Y0_kg_ha  # ~1.347% loss per index point\n\n# Fungicide efficacy (randomized sampling)\nrE <- function(S) rbeta(S, 46, 67)  # Machado et al. 2017, tebuconazole\n\n# Cost (USD) per application\nrC <- function(S) pmax(rnorm(S, mean = 150, sd = 20), 0) * brl_to_usd\n\n# Wheat price (USD/kg), simulated with variability\nrP <- function(S) {\n  pmax(rnorm(S, mean = 1.3 * brl_to_usd, sd = 0.1 * brl_to_usd), 0)\n}\n\n\n# Threshold grid for decision-making\nths <- seq(0.05, 0.60, by = 0.01)\nS   <- 10000  # PSA sample size\nset.seed(123)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Risk-conditional severity per threshold\n# Draws severity points either aligned with observations or from population\nh_bw <- 0.06  # bandwidth for kernel weighting\n\nhave_aligned_sev <- exists(\"sev\") && length(sev) == length(y)\n\nif (have_aligned_sev) {\n  # Severity aligned with each observation\n  base_idx <- which(y == 1 & is.finite(p_hat) & is.finite(sev))\n  p_ep  <- p_hat[base_idx]\n  s_ep  <- sev[base_idx]  # fraction 0â€“1\n\n  draw_s_pts <- function(pt, S){\n    w <- exp(- (p_ep - pt)^2 / (2 * h_bw^2))\n    if (sum(w) == 0 || all(!is.finite(w))) w <- rep(1, length(p_ep))\n    w <- pmax(w, 1e-9)\n    s_frac <- sample(s_ep, size = S, replace = TRUE, prob = w)\n    100 * s_frac  # Return in POINTS\n  }\n\n} else {\n  # Use population-level severity (years/locations with epidemic)\n  stopifnot(exists(\"sev_epid\"))\n  s_base <- sev_epid[is.finite(sev_epid)]\n  s_base <- s_base[s_base >= 0 & s_base <= 1]\n\n  k_prec <- 25\n  q <- seq(0, 1, by = 0.1)\n  mu_q <- stats::quantile(s_base, probs = q, na.rm = TRUE)\n  fit_mu <- stats::splinefun(x = q, y = mu_q, method = \"monoH.FC\")\n\n  draw_s_pts <- function(pt, S){\n    r <- mean(p_hat[y==1] <= pt, na.rm = TRUE)\n    m <- min(max(fit_mu(r), 0), 1)\n    alpha <- max(m * k_prec, 1e-3)\n    beta  <- max((1 - m) * k_prec, 1e-3)\n    100 * rbeta(S, alpha, beta)\n  }\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Probabilistic Sensitivity Analysis (PSA)\n# Compute population-level and per-treated-unit NMB for each threshold\n\ncompute_psa <- function(y, p_hat, ths, slope_kg, P, rE, rC, S = 10000){\n  N <- length(y)\n  map_dfr(ths, function(pt){\n    pred <- p_hat >= pt\n    TP   <- sum(pred & y == 1)\n    Tt   <- sum(pred)\n    PPV  <- if (Tt > 0) TP / Tt else 0\n\n    # Sampling of efficacy, cost, and severity points\n    E      <- rE(S)\n    C      <- rC(S)\n    P      <- rP(S)       # wheat price in USD/kg\n    P_saca <- P * 60\n    s_pts  <- draw_s_pts(pt, S)\n\n    # Benefit per epidemic (USD/ha)\n    B <- (d_pct / 100) * E * s_pts * Y0_kg_ha * P\n\n    # NMB per population unit and per treated unit\n    NMB_pop  <- (TP / N) * B - (Tt / N) * C\n    NMB_trat <- PPV * B - C\n\n    req_PPV <- pmin(C / pmax(B, 1e-9), 1)\n\n    tibble(\n      pt,\n      NMB_mean      = mean(NMB_pop),\n      NMB_lo        = unname(quantile(NMB_pop, 0.025)),\n      NMB_hi        = unname(quantile(NMB_pop, 0.975)),\n      Pr_pos        = mean(NMB_pop > 0),\n      Pr_ge_1saca   = mean(NMB_pop >= P_saca),\n      NMB_trat_mean = mean(NMB_trat),\n      NMB_trat_lo = unname(quantile(NMB_trat, 0.025)),\n      NMB_trat_hi = unname(quantile(NMB_trat, 0.975)),\n      Pr_trat_pos   = mean(NMB_trat > 0),\n      PPV           = PPV,\n      PPV_req_med   = median(req_PPV),\n      PPV_req_lo    = quantile(req_PPV, 0.10),\n      PPV_req_hi    = quantile(req_PPV, 0.90)\n    )\n  })\n}\n\n# Run PSA and save results\nres <- compute_psa(y, p_hat, ths, slope_kg, P_usd_per_kg, rE, rC, S)\nwrite_csv(res, \"plan/res.csv\")\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}